{"slots":{"0":{"name":"core","type":{"events":[],"methods":[]}},"1":{"name":"contact","type":{"events":[],"methods":[]}},"2":{"name":"soundalert","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"10":{"name":"weapo3","type":{"events":[],"methods":[]}},"11":{"name":"weap2","type":{"events":[],"methods":[]}},"12":{"name":"weap1","type":{"events":[],"methods":[]}},"13":{"name":"weapon_4","type":{"events":[],"methods":[]}},"14":{"name":"weapon_5","type":{"events":[],"methods":[]}},"15":{"name":"weapon_6","type":{"events":[],"methods":[]}},"16":{"name":"weapon_7","type":{"events":[],"methods":[]}},"17":{"name":"weapon_8","type":{"events":[],"methods":[]}},"18":{"name":"slot19","type":{"events":[],"methods":[]}},"19":{"name":"slot20","type":{"events":[],"methods":[]}},"20":{"name":"radar_1","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"contact.activate()\nsystem.print(\"New Ship entered: \".. id)\nunit.setTimer(\"contact\",0.1)","filter":{"args":[{"variable":"*"}],"signature":"enter(id)","slotKey":"20"},"key":"0"},{"code":"contact.deactivate()\nsystem.print(\"Ship left: \"..radar_1.getConstructName(id) .. \" \"..id)","filter":{"args":[{"variable":"*"}],"signature":"leave(id)","slotKey":"20"},"key":"1"},{"code":"-- category panel display helpers\n_autoconf = {}\n_autoconf.panels = {}\n_autoconf.panels_size = 0\n_autoconf.displayCategoryPanel = function(elements, size, title, type, widgetPerData)\n    widgetPerData = widgetPerData or false -- default to one widget for all data\n    if size > 0 then\n        local panel = system.createWidgetPanel(title)\n        local widget\n        if not widgetPerData then\n            widget = system.createWidget(panel, type)\n        end\n        for i = 1, size do\n            if widgetPerData then\n                widget = system.createWidget(panel, type)\n            end\n            system.addDataToWidget(elements[i].getDataId(), widget)\n        end\n        _autoconf.panels_size = _autoconf.panels_size + 1\n        _autoconf.panels[_autoconf.panels_size] = panel\n    end\nend\n_autoconf.hideCategoryPanels = function()\n    for i=1,_autoconf.panels_size do\n        system.destroyWidgetPanel(_autoconf.panels[i])\n    end\nend\n-- Proxy array to access auto-plugged slots programmatically\nradar = {}\nradar[1] = radar_1\nradar_size = 1\n\nweapon = {}\n\nfor key, value in pairs(unit) do\n  if type(value) == \"table\" and type(value.export) == \"table\" then -- `value` is an element and `key` is the slot name\n    if value.getElementClass then -- if it has a class\n      if string.match(value.getElementClass(), \"Weapon\") then --if it's a gun\n           weapon[#weapon + 1] = value\n      end\n    end\n  end\nend\ndo\n  -- Set GC pause. This more or less means by how many % memory use should increase before a garbage collection is started. Lua default is 200\n  local newPause = 110\n  local oldPause = collectgarbage(\"setpause\", newPause)\n\n  if oldPause < newPause then\n    -- DU now has a different default GC pause which is even lower. Revert back to it.\n    collectgarbage(\"setpause\", oldPause)\n  end\nend\n\n--weapon[1] = weapon_1\n--weapon[2] = weapon_2\nweapon_size = #weapon\n\n\nsoundFolder = \"APRIVALPVP\" --export: (Default: \"archHUD\")\nsoundVolume = 60 --export: (Default: 100)\nsounds = true\nvoices = true --export: (Default: true)\nalerts = true --export: (Default: true)\n\nlocal autoVariables = {\"sounds\"}\n\n\n\n    local function addTable(table1, table2) -- Function to add two tables together\n        for i = 1, #table2 do\n            table1[#table1 + 1 ] = table2[i]\n        end\n        return table1\n    end\n\n    local function saveableVariables(subset) -- returns saveable variables by catagory\n        local returnSet = {}\n            -- Complete list of user variables above, must be in saveableVariables to be stored on databank\n            local saveableVariablesBoolean = {\"voices\", \"alerts\"}\n\n            local savableVariablesHud = {\"soundVolume\"}\n\n        if not subset then\n            addTable(returnSet, saveableVariablesBoolean)\n            addTable(returnSet, savableVariablesHud)\n            return returnSet\n        elseif subset == \"boolean\" then\n            return saveableVariablesBoolean\n        elseif subset == \"hud\" then\n            return savableVariablesHud\n        end            \n    end        \n\n-- element widgets\n--_autoconf.displayCategoryPanel(radar, radar_size, \"Target\", \"periscope\") --Use the periscope scipt inluded. If you want default periscope uncomment this line\n_autoconf.displayCategoryPanel(weapon, weapon_size, \"Weapons\", \"weapon\", true)\n_autoconf.displayCategoryPanel(radar, radar_size, \"Radar\", \"radar\")\n\n--if soundalert then soundalert.deactivate() end\n\nfunction play(sound, ID, type)\nif (type == nil and not voices) or (type ~= nil and not alerts) or soundFolder == \"archHUD\" or not sounds then return end\nif type ~= nil then\nsystem.logInfo(\"sound_notification|audiopacks/\"..soundFolder..\"/\"..sound..\"|\"..ID..\"|\"..soundVolume)\n        else\n            system.logInfo(\"sound_q|audiopacks/\"..soundFolder..\"/\"..sound..\"|\"..ID..\"|\"..soundVolume)\n        end\n    end\n\nwp = WeaponModule.new()\n--dmgrep = DamageModule.new()\nsystem.showScreen(1)\nplay(\"Startup.mp3\", \"SUP\")\ncore.hide()","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"2"},{"code":"_autoconf.hideCategoryPanels()\nfunction play(sound, ID, type)\nif (type == nil and not voices) or (type ~= nil and not alerts) or soundFolder == \"archHUD\" or not sounds then return end\nif type ~= nil then\nsystem.logInfo(\"sound_notification|audiopacks/\"..soundFolder..\"/\"..sound..\"|\"..ID..\"|\"..soundVolume)\n        else\n            system.logInfo(\"sound_q|audiopacks/\"..soundFolder..\"/\"..sound..\"|\"..ID..\"|\"..soundVolume)\n        end\n    end\nplay(\"Shutdown.mp3\", \"SD\")\n\n\n","filter":{"args":[],"signature":"stop()","slotKey":"-1"},"key":"3"},{"code":"local function play(sound, ID, type)\nif (type == nil and not voices) or (type ~= nil and not alerts) or soundFolder == \"archHUD\" or not sounds then return end\nif type ~= nil then\nsystem.logInfo(\"sound_notification|audiopacks/\"..soundFolder..\"/\"..sound..\"|\"..ID..\"|\"..soundVolume)\n        else\n            system.logInfo(\"sound_q|audiopacks/\"..soundFolder..\"/\"..sound..\"|\"..ID..\"|\"..soundVolume)\n        end\n    end\n\nplay(\"RadarContact.mp3\", \"RC\")\nunit.stopTimer(\"contact\")\n\n\n\n\n\n\n","filter":{"args":[{"value":"contact"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"4"},{"code":"radarData = getRadarData(radar_1.getData())\nsystem.updateData(radarDataValue, radarData)","filter":{"args":[{"value":"transponder"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"5"},{"code":"--Transponder widget\nfunction getRadarData(getData)\n  local out = \"\"\n  for S in getData:gmatch('({\"constructId\":\".-%b{}.-})') do\n    if radar_1.hasMatchingTransponder(S:match('\"constructId\":\"([%d%.]*)\"')) == 1 then\n       if #out > 0 then out = out .. ',' end\n       out = out .. S\n    end\n  end\n  out = '{\"constructsList\":['..out ..'],'.. getData:match('\"elementId\":\".+')\n  return out\nend\n\nradarData = getRadarData(radar_1.getData())\nradarPanel = system.createWidgetPanel(\"Rival/Friendly\")\nradarWidgetValue = system.createWidget(radarPanel, \"radar\")\nradarDataValue = system.createData(radarData) \nsystem.addDataToWidget(radarDataValue, radarWidgetValue)\nunit.setTimer(\"transponder\",0.2)","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"6"},{"code":"wp_html=wp:renderHTML()\n\n-- Show the selected view\nsystem.setScreen(wp_html)\n--[[\n\nlocal periscope = [[\n<style> \nimg {\nopacity: 0.75;\nmargin-top: 8vh;\nmargin-left: 1100px;\n}</style>\n<img src=\"gunner_target.liveview\" style=\"width: 20%; max-height: 50%; box-sizing: border-box\">]]\n--[[system.setScreen(periscope)\nsystem.showScreen(1)\n\n--]]\n","filter":{"args":[],"signature":"update()","slotKey":"-2"},"key":"7"},{"code":"\n-- Function extracted from DU-Orbital-Hud by Dimencia\nfunction getDistanceDisplayString(distance)\n    local su = distance > 100000\n    local result = \"\"\n    if su then\n        -- Convert to SU\n        result = round(distance / 1000 / 200, 1) .. \" SU\"\n    elseif distance < 1000 then\n        result = round(distance, 1) .. \" M\"\n    else\n        -- Convert to KM\n        result = round(distance / 1000, 1) .. \" KM\"\n    end\n\n    return result\nend\n","filter":{"args":[],"signature":"start()","slotKey":"-3"},"key":"10"},{"code":"-------------------\n-- RADAR UTILITY FUNCTIONS\n-------------------\n--function to split a string into an arrow using a delimeter\nfunction split(s, delimiter)\n    result = {};\n    for match in (s..delimiter):gmatch(\"(.-)\"..delimiter) do\n        table.insert(result, match);\n    end\n    return result;\nend\n\n--function to take a substring from another, identified between to known chars/set of chars, error if chars not found\nfunction Str_Cut(str,s_begin,s_end)\n    local StrLen = string.len(str)\n    local s_begin_Len = string.len(s_begin)\n    local s_end_Len = string.len(s_end)\n    local s_begin_x = string.find(str, s_begin, 1)\n    --print(s_begin_x)\n    local s_end_x = string.find(str, s_end, s_begin_x+1)\n    --print(s_end_x)\n    local rs=(string.sub(str, s_begin_x+s_begin_Len, s_end_x-1))\n    return rs\nend\n\n\n-------------------\n-- WEAPON MODULE\n-------------------\nPVPHUD_txt_module_left_pos = 300 --export:  change the left position of the ship layout (Increase to move right)   \nPVPHUD_txt_module_top_pos = 1 --export: change the top position of the ship layout (Increase to move down)\nPVPHUD_show_weapon = true --export: show/hide weapon module\nPVPHUD_weapon_refresh_rate = 0.5 --export: Weapon refresh rate every x seconds\n\nWeaponModule = {}\nWeaponModule.__index = WeaponModule\n\nfunction WeaponModule.new()\n    local self = setmetatable({}, WeaponModule)\n    self.html = \"\"\n    self.last_time_updated = 0\n    return self\nend\n\nfunction WeaponModule.renderHTML(self)\n    if PVPHUD_show_weapon and weapon_size>0 and radar_size>0 then\n        if system.getTime() > self.last_time_updated + PVPHUD_weapon_refresh_rate then\n            local idtarget=nil\n            self.html=[[<style>\n            .cat {\n            color:white;\n            background-color:black;\n        }\n            .wptxt {\n            text-align:center;\n            background-color: rgba(0, 0, 255, .4);\n            width: 14vw;\n            font-size:1vh;   \n            position:absolute;\n            left:]]..(PVPHUD_txt_module_left_pos+875)..[[px;\n            top:]]..(PVPHUD_txt_module_top_pos+-10)..[[px;\n        }</style><div class=\"wptxt\">]]\n            -- Draw hud for each weapons\n            for i,current_wp in ipairs(weapon) do\n                local obj, pos, err = json.decode(current_wp.getData(), 1, nil)\n                if err then\n                    system.print(\"Error:\", err)\n                else\n                    self.html = self.html..[[<div class=\"title\"><hr>]]..obj.name..[[<hr><table style=\"width:100%;font-size:0.8vh;\">]]\n                    self.html = self.html..[[<tr><td class=\"cat\" rowspan=\"1\">AMMO</td><td>type</td><td class=\"r\">]]..obj.properties.ammoName..[[</td></tr>]]\n                    if obj.properties.ammoCount == nil or obj.properties.ammoCount == 0 then\n                        self.html = self.html..[[<tr><td style=\"background-color:red;\" colspan=\"2\">RELOAD !</td></tr>]]\n                    else\n                        self.html = self.html..[[<tr><td>Remaining</td><td class=\"r\">]]..obj.properties.ammoCount..[[</td></tr>]]\n                    end    \n                    self.html = self.html..[[<tr><td colspan=\"3\"><hr></td></tr>]]\n                    self.html = self.html..[[<tr><td class=\"cat\" rowspan=\"3\">FOE</td>]]\n                    if obj.targetConstruct ~= nil then\n                        idtarget = obj.targetConstruct.constructId\n                    end\n\n                    if obj.targetConstruct ~= nil and obj.targetConstruct.constructId ~= nil and obj.targetConstruct.constructId ~= \"0\" and obj.properties.outOfZone == true then\n                        self.html = self.html..[[<td colspan=\"2\" style=\"background-color:red;\"\">OUT OF RANGE</td></tr>]]\n                    elseif obj.targetConstruct ~= nil and obj.targetConstruct.constructId ~= nil and obj.targetConstruct.constructId ~= \"0\" and obj.properties.outOfZone == false then\n                        local hitchance = round(obj.properties.hitProbability*100,2)\n                        local color=\"red\"\n                        \n                        if hitchance>75 then\n                            color=\"green\"\n                        elseif hitchance>50 then\n                            color=\"#0E22EC\"  \n                        elseif hitchance>35 then\n                            color=\"orange\"\n                        end    \n                        self.html = self.html..[[<td colspan=\"2\" style=\"background-color:]]..color..[[;font-size:1vh;\">]]..hitchance..[[%</td></tr>]]\n                        \n                    else\n                        self.html = self.html..[[<td colspan=\"2\">NO TARGET</td></tr>]]\n                    end    \n                    self.html = self.html..[[</table></div>]]\n                    -- Target info\n    \n                end\n            end  \n\n            if idtarget ~= nil and tonumber(idtarget)>0 then\n                -- To avoid CPU OVERLOAD, it is smarter to cut the radar contact list\n                local data = split(radar[1].getData(),idtarget..\"\\\",\")\n                if data ~= nil and data[2] ~= nil then\n                    data = split(data[2],\",\\\"targetThreatState\") \n                    local target_data = data[1]\n                    if  target_data ~= nil then\n                        local obj, pos, err = json.decode(\"{\"..target_data..\"}\", 1, nil)\n                        if err then\n                            system.print(\"Error:\", err)\n                        else \n                            self.html=self.html..\"<br>Target/Size: <b>\"..obj.name.. \" / \" ..obj.size..\"</b><hr>\"\n                            --self.html=self.html..\"Size<br><b>\"..obj.size..\"</b><hr>\"\n                            self.html=self.html..\"Distance: <b>\"..getDistanceDisplayString(obj.distance)..\"</b><hr>\"\n                            self.html=self.html..\"Speed: <b>\"..(obj.info.speed * 3.6)..\" KM/H</b><hr>\"\n                            self.html=self.html..string.format(\"Voxel Mass: <b>%.0f T</b><hr>\", obj.info.mass / 1000)     \n                            self.html=self.html..\"Has Radar: <b>\"..(obj.info.radars == 1 and \"Yes\" or \"No\")..\"</b><hr>\"\n                            self.html=self.html..\"Has Engines: <b>\"..(obj.info.spaceEngines == 1 and \"Yes\" or \"No\")..\"</b><hr>\"\n                            self.html=self.html..\"Has AGG: <b>\"..(obj.info.antiGravity == 1 and \"Yes\" or \"No\")..\"</b><hr>\" \n                            self.html=self.html..\"Has Rockets: <b>\"..(obj.info.rocketBoosters == 1 and \"Yes\" or \"No\")..\"</b><hr>\"\n                            self.html=self.html..\"Threat Status: <b>\"..(obj.info.targetThreatState == 1 and \"You are Locked\" or \"Not Locked\")..\"</b><hr>\"                            \n                        end\n                    end\n                end  \n            end\n        end\n    end    \n    return self.html..\"</div>\"\nend","filter":{"args":[],"signature":"start()","slotKey":"-3"},"key":"11"}],"methods":[],"events":[]}
