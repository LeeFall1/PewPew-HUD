{"slots":{"0":{"name":"core","type":{"events":[],"methods":[]}},"1":{"name":"contact","type":{"events":[],"methods":[]}},"2":{"name":"dbhud","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"10":{"name":"weapo3","type":{"events":[],"methods":[]}},"11":{"name":"weap2","type":{"events":[],"methods":[]}},"12":{"name":"weap1","type":{"events":[],"methods":[]}},"13":{"name":"weapon_4","type":{"events":[],"methods":[]}},"14":{"name":"weapon_5","type":{"events":[],"methods":[]}},"15":{"name":"weapon_6","type":{"events":[],"methods":[]}},"16":{"name":"weapon_7","type":{"events":[],"methods":[]}},"17":{"name":"weapon_8","type":{"events":[],"methods":[]}},"18":{"name":"slot19","type":{"events":[],"methods":[]}},"19":{"name":"slot20","type":{"events":[],"methods":[]}},"20":{"name":"radar_1","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"contact.activate()\nsystem.print(\"New Ship entered: \".. id)\nunit.setTimer(\"contact\",0.1)","filter":{"args":[{"variable":"*"}],"signature":"enter(id)","slotKey":"20"},"key":"0"},{"code":"contact.deactivate()\n\nsystem.print(\"Ship left: \"..radar_1.getConstructName(id) .. \" \"..id)","filter":{"args":[{"variable":"*"}],"signature":"leave(id)","slotKey":"20"},"key":"1"},{"code":"-- category panel display helpers\n_autoconf = {}\n_autoconf.panels = {}\n_autoconf.panels_size = 0\n_autoconf.displayCategoryPanel = function(elements, size, title, type, widgetPerData)\n    widgetPerData = widgetPerData or false -- default to one widget for all data\n    if size > 0 then\n        local panel = system.createWidgetPanel(title)\n        local widget\n        if not widgetPerData then\n            widget = system.createWidget(panel, type)\n        end\n        for i = 1, size do\n            if widgetPerData then\n                widget = system.createWidget(panel, type)\n            end\n            system.addDataToWidget(elements[i].getDataId(), widget)\n        end\n        _autoconf.panels_size = _autoconf.panels_size + 1\n        _autoconf.panels[_autoconf.panels_size] = panel\n    end\nend\n_autoconf.hideCategoryPanels = function()\n    for i=1,_autoconf.panels_size do\n        system.destroyWidgetPanel(_autoconf.panels[i])\n    end\nend\n-- Proxy array to access auto-plugged slots programmatically\nradar = {}\nradar[1] = radar_1\nradar_size = 1\n\nweapon = {}\n\nfor key, value in pairs(unit) do\n  if type(value) == \"table\" and type(value.export) == \"table\" then -- `value` is an element and `key` is the slot name\n    if value.getElementClass then -- if it has a class\n      if string.match(value.getElementClass(), \"Weapon\") then --if it's a gun\n           weapon[#weapon + 1] = value\n      end\n    end\n  end\nend\ndo\n  -- Set GC pause. This more or less means by how many % memory use should increase before a garbage collection is started. Lua default is 200\n  local newPause = 110\n  local oldPause = collectgarbage(\"setpause\", newPause)\n\n  if oldPause < newPause then\n    -- DU now has a different default GC pause which is even lower. Revert back to it.\n    collectgarbage(\"setpause\", oldPause)\n  end\nend\n\n--weapon[1] = weapon_1\n--weapon[2] = weapon_2\nweapon_size = #weapon\n\n\nsoundFolder = \"RIVALPVP\" --export: (Default: \"archHUD\")\nsoundVolume = 70 --export: (Default: 100)\nsounds = true\nvoices = true --export: (Default: true)\nalerts = true --export: (Default: true)\n\nlocal autoVariables = {\"sounds\"}\n\n\n\n    local function addTable(table1, table2) -- Function to add two tables together\n        for i = 1, #table2 do\n            table1[#table1 + 1 ] = table2[i]\n        end\n        return table1\n    end\n\n    local function saveableVariables(subset) -- returns saveable variables by catagory\n        local returnSet = {}\n            -- Complete list of user variables above, must be in saveableVariables to be stored on databank\n            local saveableVariablesBoolean = {\"voices\", \"alerts\"}\n\n            local savableVariablesHud = {\"soundVolume\"}\n\n        if not subset then\n            addTable(returnSet, saveableVariablesBoolean)\n            addTable(returnSet, savableVariablesHud)\n            return returnSet\n        elseif subset == \"boolean\" then\n            return saveableVariablesBoolean\n        elseif subset == \"hud\" then\n            return savableVariablesHud\n        end            \n    end        \n\n-- element widgets\n--_autoconf.displayCategoryPanel(radar, radar_size, \"Target\", \"periscope\") --Use the periscope scipt inluded. If you want default periscope uncomment this line\n_autoconf.displayCategoryPanel(weapon, weapon_size, \"Weapons\", \"weapon\", true)\n_autoconf.displayCategoryPanel(radar, radar_size, \"Radar\", \"radar\")\n\n--if soundalert then soundalert.deactivate() end\n\nwp = WeaponModule.new()\ndmgrep = DamageModule.new()\nsystem.showScreen(1)\ncore.hide()","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"2"},{"code":"_autoconf.hideCategoryPanels()\n\n\n","filter":{"args":[],"signature":"stop()","slotKey":"-1"},"key":"3"},{"code":"local function play(sound, ID, type)\nif (type == nil and not voices) or (type ~= nil and not alerts) or soundFolder == \"archHUD\" or not sounds then return end\nif type ~= nil then\nsystem.logInfo(\"sound_notification|audiopacks/\"..soundFolder..\"/\"..sound..\"|\"..ID..\"|\"..soundVolume)\n        else\n            system.logInfo(\"sound_q|audiopacks/\"..soundFolder..\"/\"..sound..\"|\"..ID..\"|\"..soundVolume)\n        end\n    end\n\nplay(\"RadarContact.mp3\", \"RC\")\nunit.stopTimer(\"contact\")\n\n\n\n\n\n\n","filter":{"args":[{"value":"contact"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"4"},{"code":"radarData = getRadarData(radar_1.getData())\nsystem.updateData(radarDataValue, radarData)","filter":{"args":[{"value":"transponder"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"5"},{"code":"--Transponder widget\nfunction getRadarData(getData)\n  local out = \"\"\n  for S in getData:gmatch('({\"constructId\":\".-%b{}.-})') do\n    if radar_1.hasMatchingTransponder(S:match('\"constructId\":\"([%d%.]*)\"')) == 1 then\n       if #out > 0 then out = out .. ',' end\n       out = out .. S\n    end\n  end\n  out = '{\"constructsList\":['..out ..'],'.. getData:match('\"elementId\":\".+')\n  return out\nend\n\nradarData = getRadarData(radar_1.getData())\nradarPanel = system.createWidgetPanel(\"Rival/Friendly\")\nradarWidgetValue = system.createWidget(radarPanel, \"radar\")\nradarDataValue = system.createData(radarData) \nsystem.addDataToWidget(radarDataValue, radarWidgetValue)\nunit.setTimer(\"transponder\",0.2)","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"6"},{"code":"wp_html=wp:renderHTML()\ndamage_html=dmgrep:renderHTML()\ndamage_css=dmgrep:renderCSS()\n-- Show the selected view\ni = dmgrep:getActiveView() \ntxt_view = \"\"\nif PVPHUD_show_txt_module == true then\ntxt_view=damage_html[4]\nend\nsystem.setScreen(damage_css..damage_html[i]..txt_view..wp_html)\n--[[\n\nlocal periscope = [[\n<style> \nimg {\nopacity: 0.75;\nmargin-top: 8vh;\nmargin-left: 1100px;\n}</style>\n<img src=\"gunner_target.liveview\" style=\"width: 20%; max-height: 50%; box-sizing: border-box\">]]\n--[[system.setScreen(periscope)\nsystem.showScreen(1)\n\n--]]\n","filter":{"args":[],"signature":"update()","slotKey":"-2"},"key":"7"},{"code":"dmgrep:nextFilter()","filter":{"args":[{"value":"option1"}],"signature":"actionStart(action)","slotKey":"-2"},"key":"8"},{"code":"dmgrep:nextView()","filter":{"args":[{"value":"option2"}],"signature":"actionStart(option2)","slotKey":"-2"},"key":"9"},{"code":"\n-- Function extracted from DU-Orbital-Hud by Dimencia\nfunction getDistanceDisplayString(distance)\n    local su = distance > 100000\n    local result = \"\"\n    if su then\n        -- Convert to SU\n        result = round(distance / 1000 / 200, 1) .. \" SU\"\n    elseif distance < 1000 then\n        result = round(distance, 1) .. \" M\"\n    else\n        -- Convert to KM\n        result = round(distance / 1000, 1) .. \" KM\"\n    end\n\n    return result\nend\n","filter":{"args":[],"signature":"start()","slotKey":"-3"},"key":"10"},{"code":"-------------------\n-- RADAR UTILITY FUNCTIONS\n-------------------\n--function to split a string into an arrow using a delimeter\nfunction split(s, delimiter)\n    result = {};\n    for match in (s..delimiter):gmatch(\"(.-)\"..delimiter) do\n        table.insert(result, match);\n    end\n    return result;\nend\n\n--function to take a substring from another, identified between to known chars/set of chars, error if chars not found\nfunction Str_Cut(str,s_begin,s_end)\n    local StrLen = string.len(str)\n    local s_begin_Len = string.len(s_begin)\n    local s_end_Len = string.len(s_end)\n    local s_begin_x = string.find(str, s_begin, 1)\n    --print(s_begin_x)\n    local s_end_x = string.find(str, s_end, s_begin_x+1)\n    --print(s_end_x)\n    local rs=(string.sub(str, s_begin_x+s_begin_Len, s_end_x-1))\n    return rs\nend\n\n\n-------------------\n-- WEAPON MODULE\n-------------------\nPVPHUD_show_weapon = true --export: show/hide weapon module\nPVPHUD_weapon_refresh_rate = 0.5 --export: Weapon refresh rate every x seconds\n\nWeaponModule = {}\nWeaponModule.__index = WeaponModule\n\nfunction WeaponModule.new()\n    local self = setmetatable({}, WeaponModule)\n    self.html = \"\"\n    self.last_time_updated = 0\n    return self\nend\n\nfunction WeaponModule.renderHTML(self)\n    if PVPHUD_show_weapon and weapon_size>0 and radar_size>0 then\n        if system.getTime() > self.last_time_updated + PVPHUD_weapon_refresh_rate then\n            local idtarget=nil\n            self.html=[[<style>\n            .cat {\n            color:white;\n            background-color:black;\n        }\n            .wptxt {\n            text-align:center;\n            background-color: rgba(0, 0, 255, .4);\n            width: 14vw;\n            font-size:1vh;   \n            position:absolute;\n            left:]]..(PVPHUD_txt_module_left_pos+875)..[[px;\n            top:]]..(PVPHUD_txt_module_top_pos+-10)..[[px;\n        }</style><div class=\"wptxt\">]]\n            -- Draw hud for each weapons\n            for i,current_wp in ipairs(weapon) do\n                local obj, pos, err = json.decode(current_wp.getData(), 1, nil)\n                if err then\n                    system.print(\"Error:\", err)\n                else\n                    self.html = self.html..[[<div class=\"title\"><hr>]]..obj.name..[[<hr><table style=\"width:100%;font-size:0.8vh;\">]]\n                    self.html = self.html..[[<tr><td class=\"cat\" rowspan=\"1\">AMMO</td><td>type</td><td class=\"r\">]]..obj.properties.ammoName..[[</td></tr>]]\n                    if obj.properties.ammoCount == nil or obj.properties.ammoCount == 0 then\n                        self.html = self.html..[[<tr><td style=\"background-color:red;\" colspan=\"2\">RELOAD !</td></tr>]]\n                    else\n                        self.html = self.html..[[<tr><td>Remaining</td><td class=\"r\">]]..obj.properties.ammoCount..[[</td></tr>]]\n                    end    \n                    self.html = self.html..[[<tr><td colspan=\"3\"><hr></td></tr>]]\n                    self.html = self.html..[[<tr><td class=\"cat\" rowspan=\"3\">FOE</td>]]\n                    if obj.targetConstruct ~= nil then\n                        idtarget = obj.targetConstruct.constructId\n                    end\n\n                    if obj.targetConstruct ~= nil and obj.targetConstruct.constructId ~= nil and obj.targetConstruct.constructId ~= \"0\" and obj.properties.outOfZone == true then\n                        self.html = self.html..[[<td colspan=\"2\" style=\"background-color:red;\"\">OUT OF RANGE</td></tr>]]\n                    elseif obj.targetConstruct ~= nil and obj.targetConstruct.constructId ~= nil and obj.targetConstruct.constructId ~= \"0\" and obj.properties.outOfZone == false then\n                        local hitchance = round(obj.properties.hitProbability*100,2)\n                        local color=\"red\"\n                        \n                        if hitchance>75 then\n                            color=\"green\"\n                        elseif hitchance>50 then\n                            color=\"#0E22EC\"  \n                        elseif hitchance>35 then\n                            color=\"orange\"\n                        end    \n                        self.html = self.html..[[<td colspan=\"2\" style=\"background-color:]]..color..[[;font-size:1vh;\">]]..hitchance..[[%</td></tr>]]\n                        \n                    else\n                        self.html = self.html..[[<td colspan=\"2\">NO TARGET</td></tr>]]\n                    end    \n                    self.html = self.html..[[</table></div>]]\n                    -- Target info\n    \n                end\n            end  \n\n            if idtarget ~= nil and tonumber(idtarget)>0 then\n                -- To avoid CPU OVERLOAD, it is smarter to cut the radar contact list\n                local data = split(radar[1].getData(),idtarget..\"\\\",\")\n                if data ~= nil and data[2] ~= nil then\n                    data = split(data[2],\",\\\"targetThreatState\") \n                    local target_data = data[1]\n                    if  target_data ~= nil then\n                        local obj, pos, err = json.decode(\"{\"..target_data..\"}\", 1, nil)\n                        if err then\n                            system.print(\"Error:\", err)\n                        else \n                            self.html=self.html..\"<br>Target/Size: <b>\"..obj.name.. \" / \" ..obj.size..\"</b><hr>\"\n                            --self.html=self.html..\"Size<br><b>\"..obj.size..\"</b><hr>\"\n                            self.html=self.html..\"Distance: <b>\"..getDistanceDisplayString(obj.distance)..\"</b><hr>\"\n                            self.html=self.html..\"Speed: <b>\"..(obj.info.speed * 3.6)..\" KM/H</b><hr>\"\n                            self.html=self.html..string.format(\"Voxel Mass: <b>%.0f T</b><hr>\", obj.info.mass / 1000)     \n                            self.html=self.html..\"Has Radar: <b>\"..(obj.info.radars == 1 and \"Yes\" or \"No\")..\"</b><hr>\"\n                            self.html=self.html..\"Has Engines: <b>\"..(obj.info.spaceEngines == 1 and \"Yes\" or \"No\")..\"</b><hr>\"\n                            self.html=self.html..\"Has AGG: <b>\"..(obj.info.antiGravity == 1 and \"Yes\" or \"No\")..\"</b><hr>\" \n                            self.html=self.html..\"Has Rockets: <b>\"..(obj.info.rocketBoosters == 1 and \"Yes\" or \"No\")..\"</b><hr>\"\n                            self.html=self.html..\"Threat Status: <b>\"..(obj.info.targetThreatState == 1 and \"You are Locked\" or \"Not Locked\")..\"</b><hr>\"                            \n                        end\n                    end\n                end  \n            end\n        end\n    end    \n    return self.html..\"</div>\"\nend","filter":{"args":[],"signature":"start()","slotKey":"-3"},"key":"11"},{"code":"-------------------\n-- DAMAGE REPORT MODULE\n-------------------\n-- LUA Parameters\nPVPHUD_show_labels = true --export: show/hide view labels\nPVPHUD_defaultFilter = 2 --export: 1 for all,2 for avionics and weapons,3 for avionics only, 4 for weapons only\nPVPHUD_defaultView = 1 --export: 1 for top,2 for side and 3 for front\nPVPHUD_show_txt_module = true --export: enable the ship damage text report\nPVPHUD_dmg_priority = 3--export: Show damaged components (3) Below 100%, (2) Below 75%, (1) Below 50%\n\nPVPHUD_size_ratio = 2 --export: change the size of the ship layout, use positive or negative numbers\nPVPHUD_left_position = 5 --export: change the left position of the ship layout (Increase to move right)\nPVPHUD_top_position = 50 --export: change the top position of the ship layout (Increase to move down)\nPVPHUD_label_position = 0 --export: move the view label left or right (useful for centering)\n\nPVPHUD_txt_module_left_pos = 300 --export:  change the left position of the ship layout (Increase to move right)   \nPVPHUD_txt_module_top_pos = 1 --export: change the top position of the ship layout (Increase to move down)\n\n\nPVPHUD_dmg_refresh_rate = 0.5 --export: Damage report refresh rate every x seconds\n-------------------\n-- General Functions\n-------------------\nfunction round(num, numDecimalPlaces)\n    return tonumber(string.format(\"%.\" .. (numDecimalPlaces or 0) .. \"f\", num))\nend\n\nfunction getElemCategory(elemtype)\n    elem_category=\"UNKNOWN\"\n    if elemtype ~= nil then\n         local critical_part_list = {\"DYNAMIC CORE\",\"RESURRECTION NODE\",\"RADAR\",\"GUNNER MODULE\",\"COMMAND SEAT CONTROLLER\",\"COCKPIT\"}   \n         local avionics_part_list = {\"ENGINE\",\"FUEL-TANK\",\"ADJUSTOR\",\"VERTICAL BOOSTER\",\"RETRO-ROCKET BRAKE\",\"WING\",\"ATMOSPHERIC AIRBRAKE\"}\n         local weapon_part_list = {\"LASER\",\"CANNON\",\"MISSILE\",\"RAILGUN\"}    \n        -- CRITICALS\n        for _,reftype in ipairs(critical_part_list) do\n            if string.match(elemtype, reftype) then\n                elem_category=\"CRITICALS\"\n                break\n            end    \n        end\n        if elem_category == \"UNKNOWN\" then\n            -- AVIONICS \n            for _,reftype in ipairs(avionics_part_list) do\n                if string.match(elemtype, reftype) then\n                    elem_category=\"AVIONICS\"\n                    break\n                end\n            end\n            if elem_category == \"UNKNOWN\" then\n                -- WEAPONS\n                for _,reftype in ipairs(weapon_part_list) do\n                    -- Avoid mistaking laser emitter for a weapon...\n                    if elemtype == \"LASER\" then\n                        elem_category=\"WEAPON\"\n                        break \n                    elseif string.match(elemtype, reftype) then\n                        elem_category=\"WEAPON\"\n                        break\n                    end    \n                end \n            end\n        end \n    end\n    return elem_category\nend\n\n\n-------------------\n-- Element Class\n-------------------\nElement = {}\nElement.__index = Element\n\nfunction Element.new(elem_id,elem_type,elem_category, elem_name, elem_pos_x, elem_pos_y, elem_pos_z)\n    local self = setmetatable({}, Element)\n    self.elem_id = elem_id\n    self.elem_type = elem_type\n    self.elem_category = elem_category\n    self.elem_name = elem_name\n    self.elem_pos_x = elem_pos_x\n    self.elem_pos_y = elem_pos_y\n    self.elem_pos_z = elem_pos_z\n\n    return self\nend\n\n-------------------\n-- DamageModule Class\n-------------------\nDamageModule = {}\nDamageModule.__index = DamageModule\n\nfunction DamageModule.new()\n    local self = setmetatable({}, DamageModule)\n    self.elem_list = {}\n    self.elem_filter = PVPHUD_defaultFilter -- 4 for all,3 for avionics and weapons,2 for avionics only, 1 for weapons\n    self.active_view = PVPHUD_defaultView -- 1 for top,2 for side and 3 for front\n    self.last_time_updated = 0\n    --Default placement\n    self.dmg_module_size_ratio = 0\n\n    -- Getting the core offset\n    -- XS CORE\n    local core_offset = -5\n    self.dmg_module_size_ratio = 10\n\n    local core_hp = core.getElementHitPointsById(core.getId())\n    if core_hp > 10000 then\n        -- L CORE\n        core_offset = -128\n        self.dmg_module_size_ratio = 1\n    elseif core_hp > 1000 then\n        -- M CORE\n        core_offset = -64\n        self.dmg_module_size_ratio = 2\n    elseif core_hp > 150 then\n        -- S CORE\n        core_offset = -32\n        self.dmg_module_size_ratio = 5\n    end\n\n    self.core_offset=core_offset   \n    -- Adjustments\n    self.dmg_module_size_ratio=self.dmg_module_size_ratio+PVPHUD_size_ratio\n\n    self.max_x= -999999999\n    self.min_x= 999999999\n    self.max_y= -999999999\n    self.min_y = 999999999\n    self.max_z= -999999999\n    self.min_z = 999999999\n\n\n    -- STORING SHIP ELEMENTS\n    for i,idelem in ipairs(core.getElementIdList()) do\n        local elem_type = core.getElementTypeById(idelem):upper()\n        local elem_categ = getElemCategory(elem_type)\n        local elem_name = core.getElementNameById(idelem)\n        local x,y,z = table.unpack(core.getElementPositionById(idelem))\n        x=(x+core_offset)*self.dmg_module_size_ratio\n        y=(y+core_offset)*self.dmg_module_size_ratio\n        z=(z+core_offset)*self.dmg_module_size_ratio\n        if self.min_x > x then\n            self.min_x = x\n        end    \n        if self.min_y > y then\n            self.min_y = y\n        end\n        if self.min_z > z then\n            self.min_z = z\n        end \n        if self.max_x < x then\n            self.max_x = x\n        end    \n        if self.max_y < y then\n            self.max_y = y\n        end\n        if self.max_z < z then\n            self.max_z = z\n        end\n        self:add(Element.new(idelem,elem_type, elem_categ, elem_name, x, y, z))\n    end\n    -- Computing ship size\n    self.ship_width = 0\n    if self.min_x < 0 then\n        self.ship_width = self.ship_width + (self.min_x)*-1\n    else\n        self.ship_width = self.ship_width + self.min_x\n    end      \n    if self.max_x < 0 then\n        self.ship_width = self.ship_width + (self.max_x)*-1\n    else\n        self.ship_width = self.ship_width + self.max_x\n    end\n    self.ship_height = 0\n    if self.min_y < 0 then\n        self.ship_height = self.ship_height + (self.min_y)*-1\n    else\n        self.ship_height = self.ship_height + self.min_y\n    end      \n    if self.max_y < 0 then\n        self.ship_height = self.ship_height + (self.max_y)*-1\n    else\n        self.ship_height = self.ship_height + self.max_y\n    end\n    self.ship_z = 0\n    if self.min_z < 0 then\n        self.ship_z = self.ship_z + (self.min_z)*-1\n    else\n        self.ship_z = self.ship_z + self.min_z\n    end      \n    if self.max_z < 0 then\n        self.ship_z = self.ship_z + (self.max_z)*-1\n    else\n        self.ship_z = self.ship_z + self.max_z\n    end\n\n    return self\nend\n\nfunction DamageModule.add(self,element)\n    table.insert(self.elem_list, element)\nend\n\nfunction DamageModule.nextFilter(self)\n    if self.elem_filter < 4 then\n        self.elem_filter = self.elem_filter + 1\n    else \n        self.elem_filter = 1 \t    \n    end \nend\n\nfunction DamageModule.nextView(self)\n    if self.active_view < 3 then\n        self.active_view = self.active_view + 1\n    else \n        self.active_view = 1 \t    \n    end \nend\n\nfunction DamageModule.getActiveView(self)\n    return self.active_view\nend\n\nfunction DamageModule.renderCSS(self)\n    local css = [[\n    <style>\n    svg {\n    padding:10px;\n} \n    .view {\n    position:absolute;\n    top:]]..PVPHUD_left_position..[[px;\n    left:]]..PVPHUD_top_position..[[px;\n}\n    .dmgdotlabel {\n    width:100%;\n    text-align:center;\n    font-size:1vh;\n    font-weight:bold;\n\n}\n    ]]\n    if PVPHUD_show_txt_module == true then\n        css=css..[[\n        .title {\n        font-size:1vh;\n        text-align:center;\n        font-weight:bold;\n    }\n        .r {\n        text-align:right;\n    }\n        .dmgtxt {\n        text-align:center;\n        background-color: rgba(0, 0, 0, .4);\n        width: 9vw;\n        font-size:1vh;   \n        position:absolute;\n        left:]]..PVPHUD_txt_module_left_pos..[[px;\n        top:]]..PVPHUD_txt_module_top_pos..[[px;\n    }\n\n        .pristine {\n        color: #9BFFAC;\n    }\n        .ldmg {\n        color: #FFDD8E;\n    }\n        .mdmg {\n        color: #FF9E66;\n    }\n        .hdmg {\n        color: #FF2819;\n    }\n        .dead {\n        color: #7F120C;\n    }]]\n    end\n    css=css..[[</style>]]\n    return css\nend\n\nfunction DamageModule.renderHTML(self)\n    local front_view_html = \"\"\n    local side_view_html = \"\"\n    local top_view_html = \"\"\n    local table_view_html = \"\"\n    if system.getTime() > self.last_time_updated + PVPHUD_dmg_refresh_rate then\n        --Data gathering\n        local dead_elem_list=\"\"\n        local high_damage_list=\"\"\n        local medium_damage_list=\"\"\n        local light_damage_list=\"\"\n        local label_x = self.max_x-self.min_x\n        local maxtoptv = -99999999999\n        local maxtopfv = -99999999999\n        local maxtopsv = -99999999999\n\n        for _,elem in ipairs(self.elem_list) do\n            local element_excluded = false\n            if self.elem_filter == 2 and elem.elem_category ~= \"AVIONICS\" and elem.elem_category ~= \"WEAPON\" and elem.elem_category ~= \"CRITICAL\" then\n                element_excluded = true\n            elseif self.elem_filter == 3 and elem.elem_category ~= \"AVIONICS\" and elem.elem_category ~= \"CRITICAL\" then\n                element_excluded = true\n            elseif self.elem_filter == 4 and elem.elem_category ~= \"WEAPON\" and elem.elem_category ~= \"CRITICAL\" then\n                element_excluded = true   \n            end    \n            if element_excluded == false then\n                local elem_hp = core.getElementHitPointsById(elem.elem_id)\n                local elemmax_hp = core.getElementMaxHitPointsById(elem.elem_id)\n                local elem_hp_percentage = (elem_hp*100)/elemmax_hp\n                local color=\"\"\n                local opacity=0.2\n                elem_hp_percentage = round(elem_hp_percentage)\n                if elem_hp_percentage >= 100 then\n                    color=\"#9BFFAC\"\n                elseif elem_hp_percentage >= 75 then\n                    opacity=0.3\n                    color=\"#FFDD8E\"\n                    if PVPHUD_dmg_priority > 2 then\n                        light_damage_list=light_damage_list..[[<tr class=\"ldmg\"><td>]]..elem.elem_name..[[</td><td class=\"r\">]]..elem_hp_percentage..[[%</td></tr>]]\n                    end\n                elseif elem_hp_percentage >= 50 then\n                    color=\"#FF9E66\"\n                    opacity=0.4\n                    if PVPHUD_dmg_priority > 1 then\n                        medium_damage_list=medium_damage_list..[[<tr class=\"mdmg\"><td>]]..elem.elem_name..[[</td><td class=\"r\">]]..elem_hp_percentage..[[%</td></tr>]]\n                    end\n                elseif elem_hp_percentage > 0 then\n                    color=\"#FF2819\"\n                    opacity=0.5\n                    high_damage_list=high_damage_list..[[<tr class=\"hdmg\"><td>]]..elem.elem_name..[[</td><td class=\"r\">]]..elem_hp_percentage..[[%</td></tr>]]\n                elseif elem_hp_percentage == 0 then\n                    color=\"#7F120C\"\n                    opacity=1\n                    dead_elem_list=dead_elem_list..[[<tr class=\"dead\"><td>]]..elem.elem_name..[[</td><td class=\"r\">0%</td></tr>]]\n                end\n                local left = 0\n                local top = 0\n                -- We are using quadrants to place points correctly\n                -- 1 2\n                -- 3 4\n                if (elem.elem_pos_x>=self.min_x and elem.elem_pos_x<=0) and (elem.elem_pos_y>=0 and elem.elem_pos_y<=self.max_y) then    \n                    -- 1\n                    left = (self.min_x*-1) + elem.elem_pos_x\n                    top = self.max_y - elem.elem_pos_y\n                elseif (elem.elem_pos_x>0 and elem.elem_pos_x<=self.max_x) and (elem.elem_pos_y>=0 and elem.elem_pos_y<=self.max_y) then    \n                    -- 2\n                    left = (self.min_x*-1) + elem.elem_pos_x\n                    top = self.max_y - elem.elem_pos_y\n                elseif (elem.elem_pos_x>=self.min_x and elem.elem_pos_x<=0) and (elem.elem_pos_y>=self.min_y and elem.elem_pos_y<0) then    \n                    -- 3\n                    left = (self.min_x*-1) + elem.elem_pos_x\n                    top = self.max_y + (elem.elem_pos_y*-1)\n                elseif (elem.elem_pos_x>0 and elem.elem_pos_x<=self.max_x) and (elem.elem_pos_y>=self.min_y and elem.elem_pos_y<0) then    \n                    -- 4\n                    left = (self.min_x*-1) + elem.elem_pos_x\n                    top = self.max_y + (elem.elem_pos_y*-1)\n                end    \n                -- Top view x,y\n                if maxtoptv < top then\n                    maxtoptv = top\n                end \n                top_view_html = top_view_html..[[<circle fill-opacity=\"]]..opacity..[[\" cx=\"]]..left..[[\" cy=\"]]..top..[[\" r=\"5\" fill=\"]]..color..[[\" />]]\n                -- Front view x,z\n                if (elem.elem_pos_x>=self.min_x and elem.elem_pos_x<=0) and (elem.elem_pos_z>=0 and elem.elem_pos_z<=self.max_z) then    \n                    -- 1\n                    left = (self.min_x*-1) + elem.elem_pos_x\n                    top = self.max_z - elem.elem_pos_z\n                elseif (elem.elem_pos_x>0 and elem.elem_pos_x<=self.max_x) and (elem.elem_pos_z>=0 and elem.elem_pos_z<=self.max_z) then    \n                    -- 2\n                    left = (self.min_x*-1) + elem.elem_pos_x\n                    top = self.max_z - elem.elem_pos_z\n                elseif (elem.elem_pos_x>=self.min_x and elem.elem_pos_x<=0) and (elem.elem_pos_z>=self.min_z and elem.elem_pos_z<0) then    \n                    -- 3\n                    left = (self.min_x*-1) + elem.elem_pos_x\n                    top = self.max_z + (elem.elem_pos_z*-1)\n                elseif (elem.elem_pos_x>0 and elem.elem_pos_x<=self.max_x) and (elem.elem_pos_z>=self.min_z and elem.elem_pos_z<0) then    \n                    -- 4\n                    left = (self.min_x*-1) + elem.elem_pos_x\n                    top = self.max_z + (elem.elem_pos_z*-1)\n                end \n                if maxtopfv < top then\n                    maxtopfv = top\n                end \n                front_view_html = front_view_html..[[<circle fill-opacity=\"]]..opacity..[[\" cx=\"]]..left..[[\" cy=\"]]..top..[[\" r=\"5\" fill=\"]]..color..[[\" />]]\n                -- Side view y,z\n                if (elem.elem_pos_y>=self.min_y and elem.elem_pos_y<=0) and (elem.elem_pos_z>=0 and elem.elem_pos_z<=self.max_z) then    \n                    -- 1\n                    left = (self.min_y*-1) + elem.elem_pos_y\n                    top = self.max_z - elem.elem_pos_z\n                elseif (elem.elem_pos_y>0 and elem.elem_pos_y<=self.max_y) and (elem.elem_pos_z>=0 and elem.elem_pos_z<=self.max_z) then    \n                    -- 2\n                    left = (self.min_y*-1) + elem.elem_pos_y\n                    top = self.max_z - elem.elem_pos_z\n                elseif (elem.elem_pos_y>=self.min_y and elem.elem_pos_y<=0) and (elem.elem_pos_z>=self.min_z and elem.elem_pos_z<0) then    \n                    -- 3\n                    left = (self.min_y*-1) + elem.elem_pos_y\n                    top = self.max_z + (elem.elem_pos_z*-1)\n                elseif (elem.elem_pos_y>0 and elem.elem_pos_y<=self.max_y) and (elem.elem_pos_z>=self.min_z and elem.elem_pos_z<0) then    \n                    -- 4\n                    left = (self.min_y*-1) + elem.elem_pos_y\n                    top = self.max_z + (elem.elem_pos_z*-1)\n                end \n                if maxtopsv < top then\n                    maxtopsv = top\n                end \n                side_view_html = side_view_html..[[<circle fill-opacity=\"]]..opacity..[[\" cx=\"]]..left..[[\" cy=\"]]..top..[[\" r=\"5\" fill=\"]]..color..[[\" />]]\n            end \n        end\n        -- Text damage report\n        --Adding filter label below\n        local filter_label = \"ALL\"\n        if self.elem_filter == 2 then\n            filter_label = \"WP & AV\"\n        elseif self.elem_filter == 3 then\n            filter_label = \"AVIONICS\"\n        elseif  self.elem_filter == 4 then\n            filter_label = \"WEAPONS\"\n        end\n        -- Top view code x,y\n        top_view_html=[[<div class=\"view top_view\"><svg width=\"1000\" height=\"1000\">]]..top_view_html\n        if PVPHUD_show_labels == true then\n            top_view_html=top_view_html..[[<text x=\"]]..(label_x/2)+PVPHUD_label_position..[[\" y=\"]]..(maxtoptv+30)..[[\" text-anchor=\"middle\" font-family=\"sans-serif\" font-size=\"14px\" fill=\"white\">TOP</text><text x=\"]]..(label_x/2)+PVPHUD_label_position..[[\" y=\"]]..(maxtoptv+45)..[[\" text-anchor=\"middle\" font-family=\"sans-serif\" font-size=\"14px\" fill=\"white\">]]..filter_label..[[</text>]]\n        end\n        top_view_html=top_view_html..[[</svg></div>]]\n\n        -- front view code x,z\n        front_view_html=[[<div class=\"view front_view\"><svg width=\"1000\" height=\"1000\">]]..front_view_html\n        if PVPHUD_show_labels == true then\n            front_view_html=front_view_html..[[<text x=\"]]..(label_x/2)+PVPHUD_label_position..[[\" y=\"]]..(maxtopfv+30)..[[\" text-anchor=\"middle\" font-family=\"sans-serif\" font-size=\"14px\" fill=\"white\">FRONT</text><text x=\"]]..(label_x/2)+PVPHUD_label_position..[[\" y=\"]]..(maxtopfv+45)..[[\" text-anchor=\"middle\" font-family=\"sans-serif\" font-size=\"14px\" fill=\"white\">]]..filter_label..[[</text>]]\n        end\n        front_view_html=front_view_html..[[</svg></div>]]\n        -- side view y,z\n        side_view_html=[[<div class=\"view side_view\"><svg width=\"1000\" height=\"1000\">]]..side_view_html\n        if PVPHUD_show_labels == true then\n            side_view_html=side_view_html..[[<text x=\"]]..(label_x/2)+PVPHUD_label_position..[[\" y=\"]]..(maxtopsv+30)..[[\" text-anchor=\"middle\" font-family=\"sans-serif\" font-size=\"14px\" fill=\"white\">SIDE</text><text x=\"]]..(label_x/2)+PVPHUD_label_position..[[\" y=\"]]..(maxtopsv+45)..[[\" text-anchor=\"middle\" font-family=\"sans-serif\" font-size=\"14px\" fill=\"white\">]]..filter_label..[[</text>]]\n        end    \n        side_view_html=side_view_html..[[</svg></div>]]\n        table_view_html = table_view_html..[[<div class=\"dmgtxt\"><div class=\"title\">Damage Report :<br>]]..filter_label..[[</div><hr><table style=\"width:100%;\">]]..dead_elem_list..high_damage_list..medium_damage_list..light_damage_list..[[</table></div>]]\n    end\n    return {top_view_html,front_view_html,side_view_html,table_view_html}\nend\n\n","filter":{"args":[],"signature":"start()","slotKey":"-3"},"key":"12"}],"methods":[],"events":[]}
