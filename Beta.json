{"slots":{"0":{"name":"core","type":{"events":[],"methods":[]}},"1":{"name":"shield","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"10":{"name":"slot11","type":{"events":[],"methods":[]}},"11":{"name":"slot3","type":{"events":[],"methods":[]}},"12":{"name":"slot2","type":{"events":[],"methods":[]}},"13":{"name":"slot1","type":{"events":[],"methods":[]}},"14":{"name":"slot15","type":{"events":[],"methods":[]}},"15":{"name":"slot16","type":{"events":[],"methods":[]}},"16":{"name":"slot17","type":{"events":[],"methods":[]}},"17":{"name":"slot18","type":{"events":[],"methods":[]}},"18":{"name":"slot19","type":{"events":[],"methods":[]}},"19":{"name":"slot20","type":{"events":[],"methods":[]}},"20":{"name":"radar_1","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"if not __wrap_lua__stopped and script.onTick then\n  local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)\n  if not ok then __wrap_lua__error(message) end\nend\n","filter":{"args":[{"variable":"*"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"0"},{"code":"if not __wrap_lua__stopped and script.onStop then\n  local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)\n  if not ok then __wrap_lua__error(message) end\nend\n","filter":{"args":[],"signature":"stop()","slotKey":"-1"},"key":"1"},{"code":"-- category panel display helpers\n_autoconf = {}\n_autoconf.panels = {}\n_autoconf.panels_size = 0\n_autoconf.displayCategoryPanel = function(elements, size, title, type, widgetPerData)\n    widgetPerData = widgetPerData or false -- default to one widget for all data\n    if size > 0 then\n        local panel = system.createWidgetPanel(title)\n        local widget\n        if not widgetPerData then\n            widget = system.createWidget(panel, type)\n        end\n        for i = 1, size do\n            if widgetPerData then\n                widget = system.createWidget(panel, type)\n            end\n            system.addDataToWidget(elements[i].getDataId(), widget)\n        end\n        _autoconf.panels_size = _autoconf.panels_size + 1\n        _autoconf.panels[_autoconf.panels_size] = panel\n    end\nend\n_autoconf.hideCategoryPanels = function()\n    for i=1,_autoconf.panels_size do\n        system.destroyWidgetPanel(_autoconf.panels[i])\n    end\nend\n-- Proxy array to access auto-plugged slots programmatically\n\n-- Parenting widget\nparentingPanelId = system.createWidgetPanel(\"Docking\")\nparentingWidgetId = system.createWidget(parentingPanelId,\"parenting\")\nsystem.addDataToWidget(unit.getDataId(),parentingWidgetId)\n\n-- Combat stress widget\ncoreCombatStressPanelId = system.createWidgetPanel(\"Core combat stress\")\ncoreCombatStressgWidgetId = system.createWidget(coreCombatStressPanelId,\"core_stress\")\nsystem.addDataToWidget(core.getDataId(),coreCombatStressgWidgetId)\n\nif shield ~= nil then shield.show() end\n\nradar = {}\nradar[1] = radar_1\nradar_size = 0\n\nweapon = {}\n\nfor key, value in pairs(unit) do\n  if type(value) == \"table\" and type(value.export) == \"table\" then -- `value` is an element and `key` is the slot name\n    if value.getElementClass then -- if it has a class\n      if string.match(value.getElementClass(), \"Weapon\") then --if it's a gun\n           weapon[#weapon + 1] = value\n      end\n    end\n  end\n    end\n-- End of auto-generated code\n-- Garbage collection fix added by wrap.lua\ndo\n  -- Set GC pause. This more or less means by how many % memory use should increase before a garbage collection is started. Lua default is 200\n  local newPause = 110\n  local oldPause = collectgarbage(\"setpause\", newPause)\n\n  if oldPause < newPause then\n    -- DU now has a different default GC pause which is even lower. Revert back to it.\n    collectgarbage(\"setpause\", oldPause)\n  end\nend\n-- error handling code added by wrap.lua\n__wrap_lua__stopped = false\n__wrap_lua__stopOnError = false\n__wrap_lua__rethrowErrorAlways = false\n__wrap_lua__rethrowErrorIfStopped = true\n__wrap_lua__printError = true\n__wrap_lua__showErrorOnScreens = true\n\nfunction __wrap_lua__error (message)\n  if __wrap_lua__stopped then return end\n\n  -- make the traceback more readable and escape HTML syntax characters\n  message = tostring(message):gsub('\"%-%- |STDERROR%-EVENTHANDLER[^\"]*\"', 'chunk'):gsub(\"&\", \"&amp;\"):gsub(\"<\", \"&lt;\"):gsub(\">\", \"&gt;\")\n\n  local unit = unit or self or {}\n\n  if __wrap_lua__showErrorOnScreens then\n    for _, value in pairs(unit) do\n      if type(value) == \"table\" and value.setCenteredText and value.setHTML then -- value is a screen\n        if message:match(\"\\n\") then\n          value.setHTML([[\n<pre style=\"color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em\">\nError: ]] .. message .. [[\n</pre>]])\n        else\n          value.setCenteredText(message)\n        end\n      end\n    end\n  end\n\n  if __wrap_lua__printError and system and system.print then\n    system.print(\"Error: \" .. message:gsub(\"\\n\", \"<br>\"))\n  end\n\n  if __wrap_lua__stopOnError then\n    __wrap_lua__stopped = true\n  end\n\n  if __wrap_lua__stopped and unit and unit.exit then\n    unit.exit()\n  end\n\n  if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then\n    error(message)\n  end\nend\n\n-- in case traceback is removed or renamed\n__wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end\n\nlocal ok, message = xpcall(function ()\n\n-- script code\n\n--------------------------------------------------------------------------------\n-- gunner seat script bundle begins\n-- version: 2020-10-11 36f2884\n-- content sha256: 6471b31c05\n--------------------------------------------------------------------------------\n__lbs__version = \"2020-10-11 36f2884\"\ndo\n\ndo\nlocal _ENV = _ENV\npackage.preload[ \"common.utils.array.filter\" ] = function( ... ) _ENV = _ENV;\n---@generic TItem\n---@param arr TItem[]\n---@param predicate fun(item:TItem,index:number):boolean\nlocal function filter (arr, predicate)\n  local result = {} ---@type TItem[]\n\n  for index = 1, #arr do\n    local item = arr[index]\n    if predicate(item, index) then\n      result[#result + 1] = item\n    end\n  end\n\n  return result\nend\n\nreturn filter\n\nend\nend\n\ndo\nlocal _ENV = _ENV\npackage.preload[ \"common.utils.array.findOneMatching\" ] = function( ... ) _ENV = _ENV;\n--- Returns the first item matching the predicate.\n---@generic TItem\n---@param items TItem[]\n---@param predicate fun(item:TItem):boolean\n---@return TItem|nil, number|nil\nlocal function findOneMatching (items, predicate)\n  for index, item in ipairs(items) do\n    if predicate(item) then\n      return item, index\n    end\n  end\nend\n\nreturn findOneMatching\n\nend\nend\n\ndo\nlocal _ENV = _ENV\npackage.preload[ \"common.utils.array.orderedInsert\" ] = function( ... ) _ENV = _ENV;\nlocal format = string.format\nlocal insert = table.insert\n\n--- Insert one value into an already ordered array to a position determined by a weights dictionary.\n--- This might be a bit more efficient than (re-)sorting a short array with a custom compare function.\n--- For efficiency with larger arrays this function could use binary search (not implemented).\n---@generic TItem, TWeight\n---@param arr TItem[]\n---@param weights table<TItem, TWeight>\n---@param val TItem\n---@return number Inserted value's index in the array.\nlocal function orderedInsert (arr, weights, val)\n  if #arr == 0 then\n    arr[1] = val\n    return 1\n  end\n\n  local valWeight = weights[val]\n  if not valWeight then\n    error(format(\"value to be inserted (%s) is not in the weights table\", val))\n  end\n\n  for i = 1, #arr do\n    local nextVal = arr[i]\n    local nextWeight = weights[nextVal]\n\n    if not nextWeight then\n      error(format(\"value at index %d (%s) is not in the weights table\", i, nextVal))\n    end\n\n    if nextWeight > valWeight then\n      insert(arr, i, val)\n      return i\n    end\n  end\n\n  arr[#arr + 1] = val\n  return #arr\nend\n\nreturn orderedInsert\n\nend\nend\n\ndo\nlocal _ENV = _ENV\npackage.preload[ \"common.utils.json\" ] = function( ... ) _ENV = _ENV;\n-- Extracts values from a JSON string with pattern matching\n-- This is faster than using dkjson when only a few fields are needed\n\n-- Use this only with trusted data sources! Limitations:\n-- * Character escapes are not supported\n-- * Field nesting is ignored\n\nlocal find, gsub = string.find, string.gsub\n\n---@param json string\n---@param key string\n---@param init number|nil\n---@return string|nil, number|nil, number|nil\nlocal function extractStringJsonValue (json, key, init)\n  local pattern = [[\"]] .. key .. [[\"%s*:%s*\"([^\"]*)\"]]\n  local startIndex, endIndex, valueStr = find(json, pattern, init)\n  return valueStr, startIndex, endIndex\nend\n\n---@param json string\n---@param key string\n---@param init number|nil\n---@return number|nil, number|nil, number|nil\nlocal function extractNumberJsonValue (json, key, init)\n  local pattern = [[\"]] .. key .. [[\"%s*:%s*(-?[0-9.e-]+)]]\n  local startIndex, endIndex, valueStr = find(json, pattern, init)\n  return tonumber(valueStr), startIndex, endIndex\nend\n\n---@param json string\n---@param key string\n---@param init number|nil\n---@return boolean|nil, number|nil, number|nil\nlocal function extractBooleanJsonValue (json, key, init)\n  local pattern = [[\"]] .. key .. [[\"%s*:%s*([truefals]+)]]\n  local startIndex, endIndex, valueStr = find(json, pattern, init)\n\n  if valueStr == \"true\" then\n    return true, startIndex, endIndex\n  elseif valueStr == \"false\" then\n    return false, startIndex, endIndex\n  else\n    return nil\n  end\nend\n\n---@param extractJsonValue function\n---@param json string\n---@param key string\n---@param stopAfterIndex number|nil\n---@param stopAfterValue any|nil\n---@return any[]\nlocal function extractAllJsonValues (extractJsonValue, json, key, stopAfterIndex, stopAfterValue)\n  local values = {}\n  local valuesLen = 0\n\n  local jsonPos = 1\n  local value, valueStartIndex, valueEndIndex -- luacheck: ignore valueStartIndex -- unused\n\n  repeat\n    value, valueStartIndex, valueEndIndex = extractJsonValue(json, key, jsonPos)\n\n    if value ~= nil then\n      valuesLen = valuesLen + 1\n      values[valuesLen] = value\n\n      jsonPos = valueEndIndex + 1\n    end\n\n    if value == stopAfterValue then break end\n    if valuesLen == stopAfterIndex then break end\n  until value == nil\n\n  return values\nend\n\n---@param json string\n---@param key string\n---@param stopAfterIndex number|nil\n---@param stopAfterValue string|nil\n---@return string[]\nlocal function extractAllStringJsonValues (json, key, stopAfterIndex, stopAfterValue)\n  return extractAllJsonValues(extractStringJsonValue, json, key, stopAfterIndex, stopAfterValue)\nend\n\n---@param json string\n---@param key string\n---@param stopAfterIndex number|nil\n---@param stopAfterValue number|nil\n---@return number[]\nlocal function extractAllNumberJsonValues (json, key, stopAfterIndex, stopAfterValue)\n  return extractAllJsonValues(extractNumberJsonValue, json, key, stopAfterIndex, stopAfterValue)\nend\n\n---@param json string\n---@param key string\n---@param stopAfterIndex number|nil\n---@param stopAfterValue boolean|nil\n---@return boolean[]\nlocal function extractAllBooleanJsonValues (json, key, stopAfterIndex, stopAfterValue)\n  return extractAllJsonValues(extractBooleanJsonValue, json, key, stopAfterIndex, stopAfterValue)\nend\n\n---@param json string\n---@param key string\n---@return string\nlocal function deleteAllStringJsonValues (json, key)\n  local pattern = [[%s*\"]] .. key .. [[\"%s*:%s*\"[^\"]*\"%s*,?]]\n  return (gsub(json, pattern, \"\"))\nend\n\n---@param json string\n---@param key string\n---@return string\nlocal function deleteAllNumberJsonValues (json, key)\n  local pattern = [[%s*\"]] .. key .. [[\"%s*:%s*-?[0-9.e-]+%s*,?]]\n  return (gsub(json, pattern, \"\"))\nend\n\n---@param json string\n---@param key string\n---@return string\nlocal function deleteAllBooleanJsonValue (json, key)\n  local pattern = [[%s*\"]] .. key .. [[\"%s*:%s*[truefals]+%s*,?]]\n  return (gsub(json, pattern, \"\"))\nend\n\nreturn {\n  extractStringJsonValue = extractStringJsonValue,\n  extractNumberJsonValue = extractNumberJsonValue,\n  extractBooleanJsonValue = extractBooleanJsonValue,\n\n  extractAllStringJsonValues = extractAllStringJsonValues,\n  extractAllNumberJsonValues = extractAllNumberJsonValues,\n  extractAllBooleanJsonValues = extractAllBooleanJsonValues,\n\n  deleteAllStringJsonValues = deleteAllStringJsonValues,\n  deleteAllNumberJsonValues = deleteAllNumberJsonValues,\n  deleteAllBooleanJsonValue = deleteAllBooleanJsonValue\n}\n\nend\nend\n\ndo\nlocal _ENV = _ENV\npackage.preload[ \"common.utils.string.firstLetterToUpperCase\" ] = function( ... ) _ENV = _ENV;\n---@param str string\nlocal function firstLetterToUpperCase (str)\n  local result = str:gsub(\"^%l\", function (ch)\n    return ch:upper()\n  end)\n\n  return result\nend\n\nreturn firstLetterToUpperCase\n\nend\nend\n\ndo\nlocal _ENV = _ENV\npackage.preload[ \"common.utils.string.wordsToCamelCase\" ] = function( ... ) _ENV = _ENV;\n---@param str string\nlocal function wordsToCamelCase (str)\n  local filteredStr = str\n    :lower()\n    :gsub(\"[^%a%d ]\", \" \")\n    :gsub(\" +\", \" \")\n\n  local result = filteredStr:gsub(\" (.)\", function (ch)\n    return ch:upper()\n  end)\n\n  return result\nend\n\nreturn wordsToCamelCase\n\nend\nend\n\ndo\nlocal _ENV = _ENV\npackage.preload[ \"du.CoroutinizedLooper\" ] = function( ... ) _ENV = _ENV;\nlocal create, resume, yield = coroutine.create, coroutine.resume, coroutine.yield\n\n---@class CoroutinizedLooperParams\n---@field onLoopStart nil|fun():void\n---@field onLoopStep fun():void\n\n---@param params CoroutinizedLooperParams\nlocal function createCoroutinizedLooper (params)\n  local onLoopStart = params.onLoopStart\n  local onLoopStep = params.onLoopStep\n\n  local self = {} ---@class CoroutinizedLooper\n\n  local co ---@type thread|nil\n  local stopped = true\n\n  function self.isStopped ()\n    return stopped\n  end\n\n  function self.stop ()\n    if stopped then return end\n\n    stopped = true\n    co = nil\n  end\n\n  local function loop ()\n    local ok, message = xpcall(function ()\n      if onLoopStart then\n        onLoopStart()\n      end\n\n      while not stopped do\n        onLoopStep(self.stop)\n        yield()\n      end\n    end, traceback)\n\n    if not ok then\n      self.stop()\n      ;(__wrap_lua__error or error)(message)\n    end\n  end\n\n  function self.start ()\n    if not stopped then error(\"coroutinized loop is already started\") end\n\n    stopped = false\n    co = create(loop)\n  end\n\n  function self.step ()\n    if stopped or not co then return end\n\n    local ok, message = resume(co)\n\n    if not ok then\n      self.stop()\n      ;(__wrap_lua__error or error)(message)\n    end\n  end\n\n  return self\nend\n\nreturn { new = createCoroutinizedLooper }\n\nend\nend\n\ndo\nlocal _ENV = _ENV\npackage.preload[ \"du.Hal\" ] = function( ... ) _ENV = _ENV;\n-- \"hardware abstraction layer\" ;)\n-- more exactly, a slot abstraction layer\n\nlocal filter = require \"common.utils.array.filter\"\nlocal findOneMatching = require \"common.utils.array.findOneMatching\"\nlocal firstLetterToUpperCase = require \"common.utils.string.firstLetterToUpperCase\"\nlocal orderedInsert = require \"common.utils.array.orderedInsert\"\nlocal wordsToCamelCase = require \"common.utils.string.wordsToCamelCase\"\n\nlocal sort = table.sort\n\n---@type Control\nlocal self = self or unit or {} -- in-game self is the active control unit\n\n---@class Hal\nlocal Hal = {\n  classes = {\n    AtmoFuelContainer = \"AtmoFuelContainer\",\n    RocketFuelContainer = \"RocketFuelContainer\",\n    SpaceFuelContainer = \"SpaceFuelContainer\",\n\n    ECU = \"ECU\",\n    RemoteControlUnit = \"RemoteControlUnit\",\n\n    Hovercraft = \"Hovercraft\", -- hover engine\n    VerticalBooster = \"VerticalBooster\"\n  },\n\n  slotNames = {},\n\n  elementType = {},\n  elementInSlot = {},\n  elementSlotName = {},\n\n  elements = {}\n  -- containers, databanks, etc. are added later\n}\n\nfunction Hal.isAntiGravityGenerator (element) return element.setBaseAltitude end\nfunction Hal.isControl (element) return element.setTimer and element.exit end\nfunction Hal.isContainer (element) return element.getItemsMass end\nfunction Hal.isCore (element) return element.spawnNumberSticker end\nfunction Hal.isDatabank (element) return element.getNbKeys end\nfunction Hal.isDynamicCore (element) return Hal.isCore(element) and element.getConstructCrossSection end\nfunction Hal.isElementWithState (element) return element.getState end\nfunction Hal.isEmergencyControl (element) return Hal.isControl(element) and element.getElementClass() == Hal.classes.ECU end\nfunction Hal.isEmergencyOrRemoteControl (element) return Hal.isEmergencyControl(element) or Hal.isRemoteControl(element) end\nfunction Hal.isEngine (element) return element.getMaxThrust end\nfunction Hal.isGyro (element) return element.worldUp end\nfunction Hal.isIndustry (element) return element.getCycleCountSinceStartup end\nfunction Hal.isLibrary (element) return element.systemResolution3 end\nfunction Hal.isRadar (element) return element.getEntries and element.getConstructWorldPos end\nfunction Hal.isRemoteControl (element) return Hal.isControl(element) and element.getElementClass() == Hal.classes.RemoteControlUnit end\nfunction Hal.isPvpRadar (element) return element.getWidgetType and element.getWidgetType() == \"radar\" end\nfunction Hal.isScreen (element) return element.setCenteredText and element.setHTML end\nfunction Hal.isSystem (element) return element.getTime end\nfunction Hal.isTelemeter (element) return element.getDistance and not Hal.isEngine(element) end\nfunction Hal.isWarpDrive (element) return element.activateWarp end\nfunction Hal.isWeapon (element) return element.getWidgetType and element.getWidgetType() == \"weapon\" end\nfunction Hal.isMaybePressableElement (element)\n  return\n    Hal.isElementWithState(element)\n    and not Hal.isAntiGravityGenerator(element)\n    and not Hal.isEngine(element)\n    and not Hal.isGyro(element)\n    and not Hal.isScreen(element)\n    and not Hal.isTelemeter(element)\nend\n\nlocal elementTypes = {\n  { predicate = Hal.isAntiGravityGenerator, singular = \"anti gravity generator\", plural = \"anti gravity generators\" },\n  { predicate = Hal.isControl, singular = \"control\", plural = \"controls\" },\n  { predicate = Hal.isContainer,  singular = \"container\", plural = \"containers\" },\n  { predicate = Hal.isCore, singular = \"core\", plural = \"cores\" },\n  { predicate = Hal.isDatabank,  singular = \"databank\", plural = \"databanks\" },\n  { predicate = Hal.isDynamicCore, singular = \"dynamic core\", plural = \"dynamic cores\" },\n  { predicate = Hal.isElementWithState, singular = \"element with state\", plural = \"elements with state\" },\n  { predicate = Hal.isEngine, singular = \"engine\", plural = \"engines\" },\n  { predicate = Hal.isGyro, singular = \"gyro\", plural = \"gyros\" },\n  { predicate = Hal.isIndustry, singular = \"industry\", plural = \"industries\" },\n  { predicate = Hal.isLibrary, singular = \"library\", plural = \"libraries\" },\n  { predicate = Hal.isPvpRadar, singular = \"PVP radar\", plural = \"PVP radars\" },\n  { predicate = Hal.isRadar, singular = \"radar\", plural = \"radars\" },\n  { predicate = Hal.isScreen, singular = \"screen\", plural = \"screens\" },\n  { predicate = Hal.isSystem, singular = \"system\", plural = \"systems\" },\n  { predicate = Hal.isTelemeter, singular = \"telemeter\", plural = \"telemeters\" },\n  { predicate = Hal.isWarpDrive, singular = \"warp drive\", plural = \"warp drives\" },\n  { predicate = Hal.isWeapon, singular = \"weapon\", plural = \"weapons\" },\n  { predicate = Hal.isMaybePressableElement, singular = \"maybe pressable element\", plural = \"maybe pressable elements\" }\n}\n\n-- set table names, getter function names and error messages for each element type\n\nfor _, elementType in pairs(elementTypes) do\n  elementType.singularCamelCase = wordsToCamelCase(elementType.singular)\n  elementType.singularPascalCase = firstLetterToUpperCase(elementType.singularCamelCase)\n\n  elementType.pluralCamelCase = wordsToCamelCase(elementType.plural)\n  elementType.pluralPascalCase = firstLetterToUpperCase(elementType.pluralCamelCase)\n\n  elementType.typeName = elementType.singularCamelCase\n  elementType.tableName = elementType.pluralCamelCase\n\n  elementType.requireOneFunctionName = \"require\" .. elementType.singularPascalCase\n  elementType.requireAtLeastOneFunctionName = \"require\" .. elementType.pluralPascalCase\n\n  elementType.requireOneErrorMessage = firstLetterToUpperCase(elementType.singular) .. \" is not connected.\"\n  elementType.requireAtLeastOneErrorMessage = \"No \" .. elementType.plural .. \" are connected.\"\nend\n\n-- add getter functions\n\nfor _, elementType in pairs(elementTypes) do\n  Hal[elementType.requireOneFunctionName] = function ()\n    return Hal[elementType.tableName][1] or error(elementType.requireOneErrorMessage)\n  end\n\n  Hal[elementType.requireAtLeastOneFunctionName] = function ()\n    local elements = Hal[elementType.tableName]\n    if #elements < 1 then error(elementType.requireAtLeastOneErrorMessage) end\n    return elements\n  end\nend\n\n-- detect elements and slot names\n\nlocal unsortedElements = {}\n\nfor key, value in pairs(self) do\n  if type(key) == \"string\" and type(value) == \"table\" and type(value.export) == \"table\" then\n    local slotName, element = key, value\n\n    Hal.slotNames[#Hal.slotNames + 1] = slotName\n    Hal.elementInSlot[slotName] = element\n    Hal.elementSlotName[element] = slotName\n\n    unsortedElements[#unsortedElements + 1] = element\n  end\nend\n\n-- sort elements and slot names\n\nsort(Hal.slotNames)\n\nfor _, element in ipairs(unsortedElements) do\n  orderedInsert(Hal.elements, Hal.elementSlotName, element)\nend\n\n-- organize elements by type\n\nfor _, elementType in ipairs(elementTypes) do\n  local elementTable = {}\n  local elementTypePredicate = elementType.predicate\n\n  Hal[elementType.tableName] = elementTable\n\n  for _, element in ipairs(Hal.elements) do\n    if elementTypePredicate(element) then\n      elementTable[#elementTable + 1] = element\n      Hal.elementType[element] = elementType.typeName\n    end\n  end\nend\n\n--- used by the annotation generator\n---@private\nHal._elementTypes = elementTypes\n\n---@param class string\nfunction Hal.getElementClassPredicate (class)\n  ---@param element Element\n  return function (element)\n    return element.getElementClass and element.getElementClass():match(class) and true or false\n  end\nend\n\n---@param class string\n---@return Element\nfunction Hal.getElementWithClass (class)\n  return findOneMatching(Hal.elements, Hal.getElementClassPredicate(class))\nend\n\n---@param class string\n---@return Element[]\nfunction Hal.getElementsWithClass (class)\n  return filter(Hal.elements, Hal.getElementClassPredicate(class))\nend\n\nreturn Hal\n\nend\nend\n\ndo\nlocal _ENV = _ENV\npackage.preload[ \"pilot.components.CompositeComponent\" ] = function( ... ) _ENV = _ENV;\n---@param components table[]\nlocal function createCompositeComponent (components)\n  assert(type(components) == \"table\", \"components must be table\")\n\n  local self = {} ---@class CompositeComponent\n  setmetatable(self, self)\n\n  self.__index = function (tbl, key)\n    local function callEventHandlers (...)\n      for i = 1, #components do\n        local eventHandler = components[i][key]\n        if eventHandler then eventHandler(...) end\n      end\n    end\n\n    tbl[key] = callEventHandlers\n    return callEventHandlers\n  end\n\n  return self\nend\n\nreturn { new = createCompositeComponent }\n\nend\nend\n\ndo\nlocal _ENV = _ENV\npackage.preload[ \"pilot.components.DefaultWidgetComponent\" ] = function( ... ) _ENV = _ENV;\n---@class DefaultWidgetGroup\n---@field panelLabel string\n---@field widgetType string\n---@field elements Element[]\n---@field widgetPerData boolean\n\n--- Shows/hides default element widgets using the widget API.\n--- This is similar to the _autoconf.displayCategoryPanel and hideCategoryPanel helper functions that are automatically prepended after running autoconf.\n---@param system System\n---@param groups DefaultWidgetGroup[]\nlocal function createDefaultWidgetComponent (system, groups)\n  local panelIds = {} ---@type string[]\n\n  local self = {} --- @class DefaultWidgetComponent\n\n  self.onStart = function ()\n    for _, group in ipairs(groups) do\n      if #group.elements == 0 then goto continue end\n\n      local panelId = system.createWidgetPanel(group.panelLabel)\n\n      if group.widgetPerData then\n        -- separate widget for each element\n        for _, element in ipairs(group.elements) do\n          local widgetId = system.createWidget(panelId, group.widgetType)\n          system.addDataToWidget(element.getDataId(), widgetId)\n        end\n      else\n        -- same widget for all elements\n        local widgetId = system.createWidget(panelId, group.widgetType)\n        for _, element in ipairs(group.elements) do\n          system.addDataToWidget(element.getDataId(), widgetId)\n        end\n      end\n\n      panelIds[#panelIds + 1] = panelId\n\n      ::continue::\n    end\n  end\n\n  self.onStop = function ()\n    for _, panelId in ipairs(panelIds) do\n      system.destroyWidgetPanel(panelId)\n    end\n  end\n\n  return self\nend\n\nreturn { new = createDefaultWidgetComponent }\n\nend\nend\n\ndo\nlocal _ENV = _ENV\npackage.preload[ \"pilot.components.FilteredPvpRadarWidgetComponent\" ] = function( ... ) _ENV = _ENV;\nlocal json = require \"common.utils.json\"\nlocal plutils = require \"pl.plutils\"\nlocal stringx = require \"pl.stringx\"\nlocal CoroutinizedLooper = require \"du.CoroutinizedLooper\"\n\nlocal yield = coroutine.yield\nlocal deleteAllNumberJsonValues, extractStringJsonValue = json.deleteAllNumberJsonValues, json.extractStringJsonValue\nlocal split = plutils.split\nlocal gsub, match, sub = string.gsub, string.match, string.sub\nlocal replace = stringx.replace\nlocal concat = table.concat\n\nlocal yieldAfterEvery = 50\nlocal distanceOnlyUpdatePeriod = 1\n\nlocal constructsListStrPattern = [=[(\"constructsList\":%s*%[)(.*)(%s*%],\"elementId\")]=]\nlocal propertiesStrPattern = [=[(\"properties\":.*)\"staticProperties\"]=]\nlocal staticPropertiesStrPattern = [=[(\"staticProperties\".*)\"type\"]=]\n\n---@class FilteredPvpRadarWidgetComponentParams\n---@field pvpRadar PvpRadar\n---@field system System|nil\n\n---@alias FilteredPvpRadarWidgetCategoryPredicate fun(constructId:number,hasMatchingTransponder:boolean,constructStr:string):boolean\n\n---@param params FilteredPvpRadarWidgetComponentParams\nlocal function createFilteredPvpRadarWidgetComponent (params)\n  local pvpRadar = params.pvpRadar\n  local system = params.system or system\n\n  local prevData, prevFilteredData ---@type string|nil\n  local prevStaticPropertiesStr ---@type string|nil\n  local prevPropertiesStr ---@type string|nil\n  local lastDataTime ---@type number|nil\n\n  local categories = {\n    {\n      name = \"IFF - Friendly\",\n      predicate = function (_, hasMatchingTransponder, _)\n        return hasMatchingTransponder\n      end\n    },\n    {\n      name = \"IFF - Hostile/Neutral\",\n      predicate = function (_, hasMatchingTransponder, _)\n        return not hasMatchingTransponder\n      end\n    }\n  }\n\n  local predicatesByCategoryIndex = {} -- for faster access in the construct loop\n  for categoryIndex = 1, #categories do\n    predicatesByCategoryIndex[categoryIndex] = categories[categoryIndex].predicate\n  end\n\n  ---@param data string\n  local function removeConstructs (data)\n    return (gsub(data, constructsListStrPattern, function (strBefore, _strToReplace, strAfter)\n      return strBefore .. \"\" .. strAfter\n    end))\n  end\n\n  --- Not required, but could prevent unnecessary updates on DU's JS side.\n  ---@param data string\n  local function removePropertiesIfNotChanged (data)\n    local propertiesStr = match(data, propertiesStrPattern)\n\n    if propertiesStr ~= prevPropertiesStr then\n      prevPropertiesStr = propertiesStr\n    else\n      data = replace(data, propertiesStr, \"\", 1)\n    end\n\n    return data\n  end\n\n  --- Prevents radar type from being dispalayed as \"Atmo & Atmo & Atmo & ...\" in r0.22.6.\n  ---@param data string\n  local function removeStaticPropertiesIfNotChanged (data)\n    local staticPropertiesStr = match(data, staticPropertiesStrPattern)\n\n    if staticPropertiesStr ~= prevStaticPropertiesStr then\n      prevStaticPropertiesStr = staticPropertiesStr\n    else\n      data = replace(data, staticPropertiesStr, \"\", 1)\n    end\n\n    return data\n  end\n\n  local function setUpWidgets ()\n    -- selection will not work if widgets are initialized with empty data\n    local data = pvpRadar.getData()\n    data = removeConstructs(data)\n    data = removePropertiesIfNotChanged(data)\n    data = removeStaticPropertiesIfNotChanged(data)\n\n    for _, category in ipairs(categories) do\n      category.panelId = system.createWidgetPanel(category.name); assert(category.panelId ~= \"\")\n      category.widgetId = system.createWidget(category.panelId, \"radar\"); assert(category.widgetId ~= \"\")\n      category.dataId = system.createData(data); assert(category.dataId ~= \"\")\n      assert(system.addDataToWidget(category.dataId, category.widgetId) == 1)\n    end\n  end\n\n  local function tearDownWidgets ()\n    for _, category in ipairs(categories) do\n      system.destroyWidget(category.widgetId)\n      system.destroyWidgetPanel(category.panelId)\n      system.destroyData(category.dataId)\n    end\n  end\n\n  local function onLoopStep ()\n    local dataTime = system.getTime()\n\n    local data = pvpRadar.getData()\n    if data == prevData then\n      return\n    else\n      prevData = data\n    end\n\n    local filteredData = deleteAllNumberJsonValues(data, \"distance\")\n    if filteredData == prevFilteredData and lastDataTime and (dataTime - lastDataTime) < distanceOnlyUpdatePeriod then\n      return\n    else\n      prevFilteredData = filteredData\n    end\n\n    data = removePropertiesIfNotChanged(data)\n    data = removeStaticPropertiesIfNotChanged(data)\n\n    local constructStrsByCategoryIndex = {}\n    for categoryIndex = 1, #categories do\n      constructStrsByCategoryIndex[categoryIndex] = {}\n    end\n\n    -- get constructs from radar data\n\n    local _, constructsListStr, _ = match(data, constructsListStrPattern); yield()\n    if not constructsListStr then return end\n\n    local constructStrStart = [[{\"constructId\"]]\n    local constructStrsWithoutStarts = split(constructsListStr, constructStrStart, true); yield()\n\n    -- categorize constructs; starting from index 2 because the 1st str is empty\n\n    for strIndex = 2, #constructStrsWithoutStarts do\n      local constructStrWithoutStart = constructStrsWithoutStarts[strIndex]\n      local constructStr = constructStrStart .. constructStrWithoutStart\n\n      local constructId = extractStringJsonValue(constructStr, \"constructId\")\n      local hasMatchingTransponder = pvpRadar.hasMatchingTransponder(constructId) == 1\n\n      for categoryIndex = 1, #categories do\n        local constructMatchesCategory = predicatesByCategoryIndex[categoryIndex](constructId, hasMatchingTransponder, constructStr)\n        if constructMatchesCategory  then\n          local constructStrs = constructStrsByCategoryIndex[categoryIndex]\n          constructStrs[#constructStrs + 1] = constructStr\n        end\n      end\n\n      if strIndex % yieldAfterEvery == 0 then yield() end\n    end\n    yield()\n\n    -- build radar data strings for each category, and update the widgets\n\n    for categoryIndex = 1, #categories do\n      local category = categories[categoryIndex]\n      if not category.dataId then return end\n\n      local constructsStr = concat(constructStrsByCategoryIndex[categoryIndex])\n\n      -- remove trailing comma, if present\n      if sub(constructsStr, #constructsStr) == \",\" then\n        constructsStr = sub(constructsStr, 1, #constructsStr - 1)\n      end\n\n      local categoryData = gsub(data, constructsListStrPattern, function (strBefore, _strToReplace, strAfter)\n        return strBefore .. constructsStr .. strAfter\n      end)\n\n      assert(system.updateData(category.dataId, categoryData) == 1)\n      yield()\n    end\n\n    lastDataTime = system.getTime()\n  end\n\n  local looper = CoroutinizedLooper.new {\n    onLoopStep = onLoopStep\n  }\n\n  local self = {} ---@class FilteredPvpRadarWidgetComponent\n\n  function self.onStart ()\n    setUpWidgets()\n    looper.start()\n  end\n\n  function self.onStop ()\n    looper.stop()\n    tearDownWidgets()\n  end\n\n  function self.onUpdate ()\n    looper.step()\n  end\n\n  return self\nend\n\nreturn { new = createFilteredPvpRadarWidgetComponent }\n\nend\nend\n\ndo\nlocal _ENV = _ENV\npackage.preload[ \"pilot.getWidgetGroups\" ] = function( ... ) _ENV = _ENV;\nlocal Hal = require \"du.Hal\"\n\n---@class GetWidgetGroupParams\n---@field skipFuelContainers boolean|nil\n---@field skipPvpRadars boolean|nil\n\n--- Creates widget groups for DefaultWidgetComponent\n---@param params GetWidgetGroupParams\nlocal function getWidgetGroups (params)\n  params = params or {}\n\n  local widgetGroups = {} ---@type DefaultWidgetGroup[]\n\n  ---@param panelLabel string\n  ---@param widgetType string\n  ---@param elements Element[]\n  ---@param widgetPerData boolean|nil\n  local function tryAddWidgetGroup (panelLabel, widgetType, elements, widgetPerData)\n    if #elements == 0 then return end\n\n    widgetGroups[#widgetGroups + 1] = {\n      panelLabel = panelLabel,\n      widgetType = widgetType,\n      elements = elements,\n      widgetPerData = widgetPerData\n    }\n  end\n\n  tryAddWidgetGroup(\"Weapons\", \"weapon\", Hal.weapons, true)\n  tryAddWidgetGroup(\"Core\", \"core\", Hal.cores, true)\n  tryAddWidgetGroup(\"Periscope\", \"periscope\", Hal.pvpRadars)\n\n  if not params.skipFuelContainers then\n    tryAddWidgetGroup(\"Atmo Fuel\", \"fuel_container\", Hal.getElementsWithClass(Hal.classes.AtmoFuelContainer))\n    tryAddWidgetGroup(\"Space Fuel\", \"fuel_container\", Hal.getElementsWithClass(Hal.classes.SpaceFuelContainer))\n    tryAddWidgetGroup(\"Rocket Fuel\", \"fuel_container\", Hal.getElementsWithClass(Hal.classes.RocketFuelContainer))\n  end\n\n  if not params.skipPvpRadars then\n    tryAddWidgetGroup(\"Radar\", \"radar\", Hal.pvpRadars)\n  end\n\n  tryAddWidgetGroup(\"Anti-Gravity Generator\", \"antigravity_generator\", Hal.antiGravityGenerators, true)\n  tryAddWidgetGroup(\"Warp Drive\", \"warpdrive\", Hal.warpDrives, true)\n  tryAddWidgetGroup(\"Gyro\", \"gyro\", Hal.gyros, true)\n\n  return widgetGroups\nend\n\nreturn getWidgetGroups\n\nend\nend\n\nend\n\nlocal getWidgetGroups = require \"pilot.getWidgetGroups\"\nlocal CompositeComponent = require \"pilot.components.CompositeComponent\"\nlocal DefaultWidgetComponent = require \"pilot.components.DefaultWidgetComponent\"\nlocal FilteredPvpRadarWigdetComponent = require \"pilot.components.FilteredPvpRadarWidgetComponent\"\nlocal Hal = require \"du.Hal\"\n\nlocal system = Hal.requireSystem()\nlocal pvpRadar = Hal.requirePvpRadar()\n\nscript = CompositeComponent.new {\n  DefaultWidgetComponent.new(system, getWidgetGroups {\n    skipPvpRadars = true\n  }),\n  FilteredPvpRadarWigdetComponent.new {\n    pvpRadar = pvpRadar,\n    system = system\n  }\n}\n\nscript.onStart()\n--------------------------------------------------------------------------------\n-- gunner seat script bundle ends\n--------------------------------------------------------------------------------\n\n\n-- error handling code added by wrap.lua\nend, __wrap_lua__traceback)\nif not ok then\n  __wrap_lua__error(message)\n  if not script then script = {} end\nend\n\nwp = WeaponModule.new()\ndmgrep = DamageModule.new()\nsystem.showScreen(1)\ncore.hide()\n","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"2"},{"code":" local function play(sound, ID, type)\n        if (type == nil and not voices) or (type ~= nil and not alerts) or soundFolder == \"archHUD\" or not sounds then return end\n        if type ~= nil then\n            if type == 2 then\n                system.logInfo(\"sound_loop|audiopacks/\"..soundFolder..\"/\"..sound..\"|\"..ID..\"|\"..soundVolume)\n            else\n                system.logInfo(\"sound_notification|audiopacks/\"..soundFolder..\"/\"..sound..\"|\"..ID..\"|\"..soundVolume)\n            end\n        else\n            system.logInfo(\"sound_q|audiopacks/\"..soundFolder..\"/\"..sound..\"|\"..ID..\"|\"..soundVolume)\n        end\n    end\n\nplay(\"HostileContact\", \"RC\")\nunit.stopTimer(\"contact\")","filter":{"args":[{"value":"contact"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"3"},{"code":"local function play(sound, ID, type)\n        if (type == nil and not voices) or (type ~= nil and not alerts) or soundFolder == \"archHUD\" or not sounds then return end\n        if type ~= nil then\n            if type == 2 then\n                system.logInfo(\"sound_loop|audiopacks/\"..soundFolder..\"/\"..sound..\"|\"..ID..\"|\"..soundVolume)\n            else\n                system.logInfo(\"sound_notification|audiopacks/\"..soundFolder..\"/\"..sound..\"|\"..ID..\"|\"..soundVolume)\n            end\n        else\n            system.logInfo(\"sound_q|audiopacks/\"..soundFolder..\"/\"..sound..\"|\"..ID..\"|\"..soundVolume)\n        end\n    end\nplay(\"Shutdown\", \"SD\")","filter":{"args":[],"signature":"stop()","slotKey":"-1"},"key":"4"},{"code":"soundFolder = \"APRIVALPVP\" --export: (Default: \"archHUD\")\nsoundVolume = 60 --export: (Default: 100)\nsounds = true\nvoices = true --export: (Default: true)\nalerts = true --export: (Default: true)\n\nlocal autoVariables = {\"sounds\"}\n\n\n\n    local function addTable(table1, table2) -- Function to add two tables together\n        for i = 1, #table2 do\n            table1[#table1 + 1 ] = table2[i]\n        end\n        return table1\n    end\n\n    local function saveableVariables(subset) -- returns saveable variables by catagory\n        local returnSet = {}\n            -- Complete list of user variables above, must be in saveableVariables to be stored on databank\n            local saveableVariablesBoolean = {\"voices\", \"alerts\"}\n\n            local savableVariablesHud = {\"soundVolume\"}\n\n        if not subset then\n            addTable(returnSet, saveableVariablesBoolean)\n            addTable(returnSet, savableVariablesHud)\n            return returnSet\n        elseif subset == \"boolean\" then\n            return saveableVariablesBoolean\n        elseif subset == \"hud\" then\n            return savableVariablesHud\n        end            \n    end  \n\n\nlocal function play(sound, ID, type)\n        if (type == nil and not voices) or (type ~= nil and not alerts) or soundFolder == \"archHUD\" or not sounds then return end\n        if type ~= nil then\n            if type == 2 then\n                system.logInfo(\"sound_loop|audiopacks/\"..soundFolder..\"/\"..sound..\"|\"..ID..\"|\"..soundVolume)\n            else\n                system.logInfo(\"sound_notification|audiopacks/\"..soundFolder..\"/\"..sound..\"|\"..ID..\"|\"..soundVolume)\n            end\n        else\n            system.logInfo(\"sound_q|audiopacks/\"..soundFolder..\"/\"..sound..\"|\"..ID..\"|\"..soundVolume)\n        end\n    end\n\nplay(\"GoTime\", \"SUP\")\n","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"5"},{"code":"if not __wrap_lua__stopped and script.onActionStart then\n  local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)\n  if not ok then __wrap_lua__error(message) end\nend\n","filter":{"args":[{"variable":"*"}],"signature":"actionStart(action)","slotKey":"-2"},"key":"6"},{"code":"if not __wrap_lua__stopped and script.onActionStop then\n  local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)\n  if not ok then __wrap_lua__error(message) end\nend\n","filter":{"args":[{"variable":"*"}],"signature":"actionStop(action)","slotKey":"-2"},"key":"7"},{"code":"if not __wrap_lua__stopped and script.onActionLoop then\n  local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)\n  if not ok then __wrap_lua__error(message) end\nend\n","filter":{"args":[{"variable":"*"}],"signature":"actionLoop(action)","slotKey":"-2"},"key":"8"},{"code":"if not __wrap_lua__stopped and script.onUpdate then\n  local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)\n  if not ok then __wrap_lua__error(message) end\nend\n","filter":{"args":[],"signature":"update()","slotKey":"-2"},"key":"9"},{"code":"if not __wrap_lua__stopped and script.onFlush then\n  local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)\n  if not ok then __wrap_lua__error(message) end\nend\n","filter":{"args":[],"signature":"flush()","slotKey":"-2"},"key":"10"},{"code":"wp_html=wp:renderHTML()\ndamage_html=dmgrep:renderHTML()\ndamage_css=dmgrep:renderCSS()\n-- Show the selected view\ni = dmgrep:getActiveView() \n--txt_view = \"\"\nif PVPHUD_show_txt_module == true then\ntxt_view=damage_html[4]\nend\nsystem.setScreen(damage_css..damage_html[i]..txt_view..wp_html)\n--[[\n\nlocal periscope = [[\n<style> \nimg {\nopacity: 0.75;\nmargin-top: 8vh;\nmargin-left: 1100px;\n}</style>\n<img src=\"gunner_target.liveview\" style=\"width: 20%; max-height: 50%; box-sizing: border-box\">]]\n--[[system.setScreen(periscope)\nsystem.showScreen(1)\n\n--]]\n\n","filter":{"args":[],"signature":"update()","slotKey":"-2"},"key":"11"},{"code":"dmgrep:nextView()","filter":{"args":[{"value":"option2"}],"signature":"actionStart(action)","slotKey":"-2"},"key":"12"},{"code":"dmgrep:nextFilter()","filter":{"args":[{"value":"option1"}],"signature":"actionStart(action)","slotKey":"-2"},"key":"13"},{"code":"-------------------\n-- DAMAGE REPORT MODULE\n-------------------\n-- LUA Parameters\nPVPHUD_show_labels = true --export: show/hide view labels\nPVPHUD_defaultFilter = 4 --export: 1 for all,2 for avionics and weapons,3 for avionics only, 4 for weapons only\nPVPHUD_defaultView = 1 --export: 1 for top,2 for side and 3 for front\nPVPHUD_show_txt_module = true --export: enable the ship damage text report\nPVPHUD_dmg_priority = 3--export: Show damaged components (3) Below 100%, (2) Below 75%, (1) Below 50%\n\nPVPHUD_size_ratio = 2 --export: change the size of the ship layout, use positive or negative numbers\nPVPHUD_left_position = 5 --export: change the left position of the ship layout (Increase to move right)\nPVPHUD_top_position = 50 --export: change the top position of the ship layout (Increase to move down)\nPVPHUD_label_position = 0 --export: move the view label left or right (useful for centering)\n\nPVPHUD_txt_module_left_pos = 200 --export:  change the left position of the ship layout (Increase to move right)   \nPVPHUD_txt_module_top_pos = 1 --export: change the top position of the ship layout (Increase to move down)\n\n\nPVPHUD_dmg_refresh_rate = 0.5 --export: Damage report refresh rate every x seconds\n-------------------\n-- General Functions\n-------------------\nfunction round(num, numDecimalPlaces)\n    return tonumber(string.format(\"%.\" .. (numDecimalPlaces or 0) .. \"f\", num))\nend\n\nfunction getElemCategory(elemtype)\n    elem_category=\"UNKNOWN\"\n    if elemtype ~= nil then\n         local critical_part_list = {\"DYNAMIC CORE\",\"RESURRECTION NODE\",\"RADAR\",\"GUNNER MODULE\",\"COMMAND SEAT CONTROLLER\",\"COCKPIT\"}   \n         local avionics_part_list = {\"ENGINE\",\"FUEL-TANK\",\"ADJUSTOR\",\"VERTICAL BOOSTER\",\"RETRO-ROCKET BRAKE\",\"WING\",\"ATMOSPHERIC AIRBRAKE\"}\n         local weapon_part_list = {\"LASER\",\"CANNON\",\"MISSILE\",\"RAILGUN\"}    \n        -- CRITICALS\n        for _,reftype in ipairs(critical_part_list) do\n            if string.match(elemtype, reftype) then\n                elem_category=\"CRITICALS\"\n                break\n            end    \n        end\n        if elem_category == \"UNKNOWN\" then\n            -- AVIONICS \n            for _,reftype in ipairs(avionics_part_list) do\n                if string.match(elemtype, reftype) then\n                    elem_category=\"AVIONICS\"\n                    break\n                end\n            end\n            if elem_category == \"UNKNOWN\" then\n                -- WEAPONS\n                for _,reftype in ipairs(weapon_part_list) do\n                    -- Avoid mistaking laser emitter for a weapon...\n                    if elemtype == \"LASER\" then\n                        elem_category=\"WEAPON\"\n                        break \n                    elseif string.match(elemtype, reftype) then\n                        elem_category=\"WEAPON\"\n                        break\n                    end    \n                end \n            end\n        end \n    end\n    return elem_category\nend\n\n\n-------------------\n-- Element Class\n-------------------\nElement = {}\nElement.__index = Element\n\nfunction Element.new(elem_id,elem_type,elem_category, elem_name, elem_pos_x, elem_pos_y, elem_pos_z)\n    local self = setmetatable({}, Element)\n    self.elem_id = elem_id\n    self.elem_type = elem_type\n    self.elem_category = elem_category\n    self.elem_name = elem_name\n    self.elem_pos_x = elem_pos_x\n    self.elem_pos_y = elem_pos_y\n    self.elem_pos_z = elem_pos_z\n\n    return self\nend\n\n-------------------\n-- DamageModule Class\n-------------------\nDamageModule = {}\nDamageModule.__index = DamageModule\n\nfunction DamageModule.new()\n    local self = setmetatable({}, DamageModule)\n    self.elem_list = {}\n    self.elem_filter = PVPHUD_defaultFilter -- 4 for all,3 for avionics and weapons,2 for avionics only, 1 for weapons\n    self.active_view = PVPHUD_defaultView -- 1 for top,2 for side and 3 for front\n    self.last_time_updated = 0\n    --Default placement\n    self.dmg_module_size_ratio = 0\n\n    -- Getting the core offset\n    -- XS CORE\n    local core_offset = -5\n    self.dmg_module_size_ratio = 10\n\n    local core_hp = core.getElementHitPointsById(core.getId())\n    if core_hp > 10000 then\n        -- L CORE\n        core_offset = -128\n        self.dmg_module_size_ratio = 1\n    elseif core_hp > 1000 then\n        -- M CORE\n        core_offset = -64\n        self.dmg_module_size_ratio = 2\n    elseif core_hp > 150 then\n        -- S CORE\n        core_offset = -32\n        self.dmg_module_size_ratio = 5\n    end\n\n    self.core_offset=core_offset   \n    -- Adjustments\n    self.dmg_module_size_ratio=self.dmg_module_size_ratio+PVPHUD_size_ratio\n\n    self.max_x= -999999999\n    self.min_x= 999999999\n    self.max_y= -999999999\n    self.min_y = 999999999\n    self.max_z= -999999999\n    self.min_z = 999999999\n\n\n    -- STORING SHIP ELEMENTS\n    for i,idelem in ipairs(core.getElementIdList()) do\n        local elem_type = core.getElementTypeById(idelem):upper()\n        local elem_categ = getElemCategory(elem_type)\n        local elem_name = core.getElementNameById(idelem)\n        local x,y,z = table.unpack(core.getElementPositionById(idelem))\n        x=(x+core_offset)*self.dmg_module_size_ratio\n        y=(y+core_offset)*self.dmg_module_size_ratio\n        z=(z+core_offset)*self.dmg_module_size_ratio\n        if self.min_x > x then\n            self.min_x = x\n        end    \n        if self.min_y > y then\n            self.min_y = y\n        end\n        if self.min_z > z then\n            self.min_z = z\n        end \n        if self.max_x < x then\n            self.max_x = x\n        end    \n        if self.max_y < y then\n            self.max_y = y\n        end\n        if self.max_z < z then\n            self.max_z = z\n        end\n        self:add(Element.new(idelem,elem_type, elem_categ, elem_name, x, y, z))\n    end\n    -- Computing ship size\n    self.ship_width = 0\n    if self.min_x < 0 then\n        self.ship_width = self.ship_width + (self.min_x)*-1\n    else\n        self.ship_width = self.ship_width + self.min_x\n    end      \n    if self.max_x < 0 then\n        self.ship_width = self.ship_width + (self.max_x)*-1\n    else\n        self.ship_width = self.ship_width + self.max_x\n    end\n    self.ship_height = 0\n    if self.min_y < 0 then\n        self.ship_height = self.ship_height + (self.min_y)*-1\n    else\n        self.ship_height = self.ship_height + self.min_y\n    end      \n    if self.max_y < 0 then\n        self.ship_height = self.ship_height + (self.max_y)*-1\n    else\n        self.ship_height = self.ship_height + self.max_y\n    end\n    self.ship_z = 0\n    if self.min_z < 0 then\n        self.ship_z = self.ship_z + (self.min_z)*-1\n    else\n        self.ship_z = self.ship_z + self.min_z\n    end      \n    if self.max_z < 0 then\n        self.ship_z = self.ship_z + (self.max_z)*-1\n    else\n        self.ship_z = self.ship_z + self.max_z\n    end\n\n    return self\nend\n\nfunction DamageModule.add(self,element)\n    table.insert(self.elem_list, element)\nend\n\nfunction DamageModule.nextFilter(self)\n    if self.elem_filter < 4 then\n        self.elem_filter = self.elem_filter + 1\n    else \n        self.elem_filter = 1 \t    \n    end \nend\n\nfunction DamageModule.nextView(self)\n    if self.active_view < 3 then\n        self.active_view = self.active_view + 1\n    else \n        self.active_view = 1 \t    \n    end \nend\n\nfunction DamageModule.getActiveView(self)\n    return self.active_view\nend\n\nfunction DamageModule.renderCSS(self)\n    local css = [[\n    <style>\n    svg {\n    padding:10px;\n} \n    .view {\n    position:absolute;\n    top:]]..PVPHUD_left_position..[[px;\n    left:]]..PVPHUD_top_position..[[px;\n}\n    .dmgdotlabel {\n    width:100%;\n    text-align:center;\n    font-size:1vh;\n    font-weight:bold;\n\n}\n    ]]\n    if PVPHUD_show_txt_module == true then\n        css=css..[[\n        .title {\n        font-size:1vh;\n        text-align:center;\n        font-weight:bold;\n    }\n        .r {\n        text-align:right;\n    }\n        .dmgtxt {\n        text-align:center;\n        background-color: rgba(0, 0, 0, .4);\n        width: 9vw;\n        font-size:1vh;   \n        position:absolute;\n        left:]]..PVPHUD_txt_module_left_pos..[[px;\n        top:]]..PVPHUD_txt_module_top_pos..[[px;\n    }\n\n        .pristine {\n        color: #9BFFAC;\n    }\n        .ldmg {\n        color: #FFDD8E;\n    }\n        .mdmg {\n        color: #FF9E66;\n    }\n        .hdmg {\n        color: #FF2819;\n    }\n        .dead {\n        color: #7F120C;\n    }]]\n    end\n    css=css..[[</style>]]\n    return css\nend\n\nfunction DamageModule.renderHTML(self)\n    local front_view_html = \"\"\n    local side_view_html = \"\"\n    local top_view_html = \"\"\n    local table_view_html = \"\"\n    if system.getTime() > self.last_time_updated + PVPHUD_dmg_refresh_rate then\n        --Data gathering\n        local dead_elem_list=\"\"\n        local high_damage_list=\"\"\n        local medium_damage_list=\"\"\n        local light_damage_list=\"\"\n        local label_x = self.max_x-self.min_x\n        local maxtoptv = -99999999999\n        local maxtopfv = -99999999999\n        local maxtopsv = -99999999999\n\n        for _,elem in ipairs(self.elem_list) do\n            local element_excluded = false\n            if self.elem_filter == 2 and elem.elem_category ~= \"AVIONICS\" and elem.elem_category ~= \"WEAPON\" and elem.elem_category ~= \"CRITICAL\" then\n                element_excluded = true\n            elseif self.elem_filter == 3 and elem.elem_category ~= \"AVIONICS\" and elem.elem_category ~= \"CRITICAL\" then\n                element_excluded = true\n            elseif self.elem_filter == 4 and elem.elem_category ~= \"WEAPON\" and elem.elem_category ~= \"CRITICAL\" then\n                element_excluded = true   \n            end    \n            if element_excluded == false then\n                local elem_hp = core.getElementHitPointsById(elem.elem_id)\n                local elemmax_hp = core.getElementMaxHitPointsById(elem.elem_id)\n                local elem_hp_percentage = (elem_hp*100)/elemmax_hp\n                local color=\"\"\n                local opacity=0.2\n                elem_hp_percentage = round(elem_hp_percentage)\n                if elem_hp_percentage >= 100 then\n                    color=\"#9BFFAC\"\n                elseif elem_hp_percentage >= 75 then\n                    opacity=0.3\n                    color=\"#FFDD8E\"\n                    if PVPHUD_dmg_priority > 2 then\n                        light_damage_list=light_damage_list..[[<tr class=\"ldmg\"><td>]]..elem.elem_name..[[</td><td class=\"r\">]]..elem_hp_percentage..[[%</td></tr>]]\n                    end\n                elseif elem_hp_percentage >= 50 then\n                    color=\"#FF9E66\"\n                    opacity=0.4\n                    if PVPHUD_dmg_priority > 1 then\n                        medium_damage_list=medium_damage_list..[[<tr class=\"mdmg\"><td>]]..elem.elem_name..[[</td><td class=\"r\">]]..elem_hp_percentage..[[%</td></tr>]]\n                    end\n                elseif elem_hp_percentage > 0 then\n                    color=\"#FF2819\"\n                    opacity=0.5\n                    high_damage_list=high_damage_list..[[<tr class=\"hdmg\"><td>]]..elem.elem_name..[[</td><td class=\"r\">]]..elem_hp_percentage..[[%</td></tr>]]\n                elseif elem_hp_percentage == 0 then\n                    color=\"#7F120C\"\n                    opacity=1\n                    dead_elem_list=dead_elem_list..[[<tr class=\"dead\"><td>]]..elem.elem_name..[[</td><td class=\"r\">0%</td></tr>]]\n                end\n                local left = 0\n                local top = 0\n                -- We are using quadrants to place points correctly\n                -- 1 2\n                -- 3 4\n                if (elem.elem_pos_x>=self.min_x and elem.elem_pos_x<=0) and (elem.elem_pos_y>=0 and elem.elem_pos_y<=self.max_y) then    \n                    -- 1\n                    left = (self.min_x*-1) + elem.elem_pos_x\n                    top = self.max_y - elem.elem_pos_y\n                elseif (elem.elem_pos_x>0 and elem.elem_pos_x<=self.max_x) and (elem.elem_pos_y>=0 and elem.elem_pos_y<=self.max_y) then    \n                    -- 2\n                    left = (self.min_x*-1) + elem.elem_pos_x\n                    top = self.max_y - elem.elem_pos_y\n                elseif (elem.elem_pos_x>=self.min_x and elem.elem_pos_x<=0) and (elem.elem_pos_y>=self.min_y and elem.elem_pos_y<0) then    \n                    -- 3\n                    left = (self.min_x*-1) + elem.elem_pos_x\n                    top = self.max_y + (elem.elem_pos_y*-1)\n                elseif (elem.elem_pos_x>0 and elem.elem_pos_x<=self.max_x) and (elem.elem_pos_y>=self.min_y and elem.elem_pos_y<0) then    \n                    -- 4\n                    left = (self.min_x*-1) + elem.elem_pos_x\n                    top = self.max_y + (elem.elem_pos_y*-1)\n                end    \n                -- Top view x,y\n                if maxtoptv < top then\n                    maxtoptv = top\n                end \n                top_view_html = top_view_html..[[<circle fill-opacity=\"]]..opacity..[[\" cx=\"]]..left..[[\" cy=\"]]..top..[[\" r=\"5\" fill=\"]]..color..[[\" />]]\n                -- Front view x,z\n                if (elem.elem_pos_x>=self.min_x and elem.elem_pos_x<=0) and (elem.elem_pos_z>=0 and elem.elem_pos_z<=self.max_z) then    \n                    -- 1\n                    left = (self.min_x*-1) + elem.elem_pos_x\n                    top = self.max_z - elem.elem_pos_z\n                elseif (elem.elem_pos_x>0 and elem.elem_pos_x<=self.max_x) and (elem.elem_pos_z>=0 and elem.elem_pos_z<=self.max_z) then    \n                    -- 2\n                    left = (self.min_x*-1) + elem.elem_pos_x\n                    top = self.max_z - elem.elem_pos_z\n                elseif (elem.elem_pos_x>=self.min_x and elem.elem_pos_x<=0) and (elem.elem_pos_z>=self.min_z and elem.elem_pos_z<0) then    \n                    -- 3\n                    left = (self.min_x*-1) + elem.elem_pos_x\n                    top = self.max_z + (elem.elem_pos_z*-1)\n                elseif (elem.elem_pos_x>0 and elem.elem_pos_x<=self.max_x) and (elem.elem_pos_z>=self.min_z and elem.elem_pos_z<0) then    \n                    -- 4\n                    left = (self.min_x*-1) + elem.elem_pos_x\n                    top = self.max_z + (elem.elem_pos_z*-1)\n                end \n                if maxtopfv < top then\n                    maxtopfv = top\n                end \n                front_view_html = front_view_html..[[<circle fill-opacity=\"]]..opacity..[[\" cx=\"]]..left..[[\" cy=\"]]..top..[[\" r=\"5\" fill=\"]]..color..[[\" />]]\n                -- Side view y,z\n                if (elem.elem_pos_y>=self.min_y and elem.elem_pos_y<=0) and (elem.elem_pos_z>=0 and elem.elem_pos_z<=self.max_z) then    \n                    -- 1\n                    left = (self.min_y*-1) + elem.elem_pos_y\n                    top = self.max_z - elem.elem_pos_z\n                elseif (elem.elem_pos_y>0 and elem.elem_pos_y<=self.max_y) and (elem.elem_pos_z>=0 and elem.elem_pos_z<=self.max_z) then    \n                    -- 2\n                    left = (self.min_y*-1) + elem.elem_pos_y\n                    top = self.max_z - elem.elem_pos_z\n                elseif (elem.elem_pos_y>=self.min_y and elem.elem_pos_y<=0) and (elem.elem_pos_z>=self.min_z and elem.elem_pos_z<0) then    \n                    -- 3\n                    left = (self.min_y*-1) + elem.elem_pos_y\n                    top = self.max_z + (elem.elem_pos_z*-1)\n                elseif (elem.elem_pos_y>0 and elem.elem_pos_y<=self.max_y) and (elem.elem_pos_z>=self.min_z and elem.elem_pos_z<0) then    \n                    -- 4\n                    left = (self.min_y*-1) + elem.elem_pos_y\n                    top = self.max_z + (elem.elem_pos_z*-1)\n                end \n                if maxtopsv < top then\n                    maxtopsv = top\n                end \n                side_view_html = side_view_html..[[<circle fill-opacity=\"]]..opacity..[[\" cx=\"]]..left..[[\" cy=\"]]..top..[[\" r=\"5\" fill=\"]]..color..[[\" />]]\n            end \n        end\n        -- Text damage report\n        --Adding filter label below\n        local filter_label = \"ALL\"\n        if self.elem_filter == 2 then\n            filter_label = \"WP & AV\"\n        elseif self.elem_filter == 3 then\n            filter_label = \"AVIONICS\"\n        elseif  self.elem_filter == 4 then\n            filter_label = \"WEAPONS\"\n        end\n        -- Top view code x,y\n        top_view_html=[[<div class=\"view top_view\"><svg width=\"1000\" height=\"1000\">]]..top_view_html\n        if PVPHUD_show_labels == true then\n            top_view_html=top_view_html..[[<text x=\"]]..(label_x/2)+PVPHUD_label_position..[[\" y=\"]]..(maxtoptv+30)..[[\" text-anchor=\"middle\" font-family=\"sans-serif\" font-size=\"14px\" fill=\"white\">TOP</text><text x=\"]]..(label_x/2)+PVPHUD_label_position..[[\" y=\"]]..(maxtoptv+45)..[[\" text-anchor=\"middle\" font-family=\"sans-serif\" font-size=\"14px\" fill=\"white\">]]..filter_label..[[</text>]]\n        end\n        top_view_html=top_view_html..[[</svg></div>]]\n\n        -- front view code x,z\n        front_view_html=[[<div class=\"view front_view\"><svg width=\"1000\" height=\"1000\">]]..front_view_html\n        if PVPHUD_show_labels == true then\n            front_view_html=front_view_html..[[<text x=\"]]..(label_x/2)+PVPHUD_label_position..[[\" y=\"]]..(maxtopfv+30)..[[\" text-anchor=\"middle\" font-family=\"sans-serif\" font-size=\"14px\" fill=\"white\">FRONT</text><text x=\"]]..(label_x/2)+PVPHUD_label_position..[[\" y=\"]]..(maxtopfv+45)..[[\" text-anchor=\"middle\" font-family=\"sans-serif\" font-size=\"14px\" fill=\"white\">]]..filter_label..[[</text>]]\n        end\n        front_view_html=front_view_html..[[</svg></div>]]\n        -- side view y,z\n        side_view_html=[[<div class=\"view side_view\"><svg width=\"1000\" height=\"1000\">]]..side_view_html\n        if PVPHUD_show_labels == true then\n            side_view_html=side_view_html..[[<text x=\"]]..(label_x/2)+PVPHUD_label_position..[[\" y=\"]]..(maxtopsv+30)..[[\" text-anchor=\"middle\" font-family=\"sans-serif\" font-size=\"14px\" fill=\"white\">SIDE</text><text x=\"]]..(label_x/2)+PVPHUD_label_position..[[\" y=\"]]..(maxtopsv+45)..[[\" text-anchor=\"middle\" font-family=\"sans-serif\" font-size=\"14px\" fill=\"white\">]]..filter_label..[[</text>]]\n        end    \n        side_view_html=side_view_html..[[</svg></div>]]\n        table_view_html = table_view_html..[[<div class=\"dmgtxt\"><div class=\"title\">Damage Report :<br>]]..filter_label..[[</div><hr><table style=\"width:100%;\">]]..dead_elem_list..high_damage_list..medium_damage_list..light_damage_list..[[</table></div>]]\n    end\n    return {top_view_html,front_view_html,side_view_html,table_view_html}\nend\n\n\n","filter":{"args":[],"signature":"start()","slotKey":"-3"},"key":"14"},{"code":"-------------------\n-- RADAR UTILITY FUNCTIONS\n-------------------\n--function to split a string into an arrow using a delimeter\nfunction split(s, delimiter)\n    result = {};\n    for match in (s..delimiter):gmatch(\"(.-)\"..delimiter) do\n        table.insert(result, match);\n    end\n    return result;\nend\n\n--function to take a substring from another, identified between to known chars/set of chars, error if chars not found\nfunction Str_Cut(str,s_begin,s_end)\n    local StrLen = string.len(str)\n    local s_begin_Len = string.len(s_begin)\n    local s_end_Len = string.len(s_end)\n    local s_begin_x = string.find(str, s_begin, 1)\n    --print(s_begin_x)\n    local s_end_x = string.find(str, s_end, s_begin_x+1)\n    --print(s_end_x)\n    local rs=(string.sub(str, s_begin_x+s_begin_Len, s_end_x-1))\n    return rs\nend\n\n\n-------------------\n-- WEAPON MODULE\n-------------------\nPVPHUD_show_weapon = true --export: show/hide weapon module\nPVPHUD_weapon_refresh_rate = 0.5 --export: Weapon refresh rate every x seconds\n\nWeaponModule = {}\nWeaponModule.__index = WeaponModule\n\nfunction WeaponModule.new()\n    local self = setmetatable({}, WeaponModule)\n    self.html = \"\"\n    self.last_time_updated = 0\n    return self\nend\n\nfunction WeaponModule.renderHTML(self)\n    if PVPHUD_show_weapon then\n        if system.getTime() > self.last_time_updated + PVPHUD_weapon_refresh_rate then\n            local idtarget=nil\n            self.html=[[<style>\n            .cat {\n            color:white;\n            background-color:black;\n        }\n            .wptxt {\n            text-align:center;\n            background-color: rgba(0, 0, 255, .1);\n            width: 13.3vw;\n            font-size:1vh;   \n            position:absolute;\n            left:]]..(PVPHUD_txt_module_left_pos+200)..[[px;\n            top:]]..(PVPHUD_txt_module_top_pos+-10)..[[px;\n        }</style><div class=\"wptxt\">]]\n            -- Draw hud for each weapons\n            for i,current_wp in ipairs(weapon) do\n                local obj, pos, err = json.decode(current_wp.getData(), 1, nil)\n                if err then\n                    system.print(\"Error:\", err)\n                else\n                    self.html = self.html..[[<div class=\"title\"><hr>]]..obj.name..[[<hr><table style=\"width:100%;font-size:0.8vh;\">]]\n                    self.html = self.html..[[<tr><td class=\"cat\" rowspan=\"1\">AMMO</td><td>type</td><td class=\"r\">]]..obj.properties.ammoName..[[</td></tr>]]\n                    if obj.properties.ammoCount == nil or obj.properties.ammoCount == 0 then\n                        self.html = self.html..[[<tr><td style=\"background-color:red;\" colspan=\"2\">RELOAD !</td></tr>]]\n                    else\n                        self.html = self.html..[[<tr><td>Remaining</td><td class=\"r\">]]..obj.properties.ammoCount..[[</td></tr>]]\n                    end    \n                    self.html = self.html..[[<tr><td colspan=\"3\"><hr></td></tr>]]\n                    self.html = self.html..[[<tr><td class=\"cat\" rowspan=\"3\">FOE</td>]]\n                    if obj.targetConstruct ~= nil then\n                        idtarget = obj.targetConstruct.constructId\n                    end\n\n                    if obj.targetConstruct ~= nil and obj.targetConstruct.constructId ~= nil and obj.targetConstruct.constructId ~= \"0\" and obj.properties.outOfZone == true then\n                        self.html = self.html..[[<td colspan=\"2\" style=\"background-color:red;\"\">OUT OF RANGE</td></tr>]]\n                    elseif obj.targetConstruct ~= nil and obj.targetConstruct.constructId ~= nil and obj.targetConstruct.constructId ~= \"0\" and obj.properties.outOfZone == false then\n                        local hitchance = round(obj.properties.hitProbability*100,2)\n                        local color=\"red\"\n                        \n                        if hitchance>75 then\n                            color=\"green\"\n                        elseif hitchance>50 then\n                            color=\"#0E22EC\"  \n                        elseif hitchance>35 then\n                            color=\"orange\"\n                        end    \n                        self.html = self.html..[[<td colspan=\"3\" style=\"background-color:]]..color..[[;font-size:1vh;\">]]..hitchance..[[%</td></tr>]]\n                        \n                    else\n                        self.html = self.html..[[<td colspan=\"1\">NO TARGET</td></tr>]]\n                    end    \n                    self.html = self.html..[[</table></div>]]\n                    -- Target info\n    \n                end\n            end  \n               \n            if idtarget ~= nil and tonumber(idtarget)>0 then\n                -- To avoid CPU OVERLOAD, it is smarter to cut the radar contact list\n                local data = split(radar[1].getData(),idtarget..\"\\\",\")\n                if data ~= nil and data[2] ~= nil then\n                    data = split(data[2],\",\\\"targetThreatState\") \n                    local target_data = data[1]\n                    if  target_data ~= nil then\n                        local obj, pos, err = json.decode(\"{\"..target_data..\"}\", 1, nil)\n                        if err then\n                            system.print(\"Error:\", err)\n                        else \n                            self.html=self.html..\"<br>Target / Size: <b> \"..obj.name.. \" / \" ..obj.size..\"</b><hr>\"\n                            --self.html=self.html..\"Size<br><b>\"..obj.size..\"</b><hr>\"\n                            self.html=self.html..\"Speed / Distance: <b> \"..(obj.info.speed * 3.6)..\" KM/H / \"..getDistanceDisplayString(obj.distance)..\"</b><hr>\"\n                            self.html=self.html..string.format(\"Voxel Mass: <b>%.0f T</b><hr>\", obj.info.mass / 1000)     \n                            self.html=self.html..\"Radar/Engines/AGG/Rockets: <b>\"..(obj.info.radars == 1 and \"Yes\" or \"No\")..\" / \"..(obj.info.spaceEngines == 1 and \"Yes\" or \"No\")..\" / \"..(obj.info.antiGravity == 1 and \"Yes\" or \"No\")..\" / \"..(obj.info.rocketBoosters == 1 and \"Yes\" or \"No\")..\"</b><hr>\"\n                            self.html=self.html..\"Weapons/Shield: <b>\"..(obj.info.weapons == null and \"Yes\" or \"No\")..\" / \"..(obj.info.shields == null and \"Yes\" or \"No\")..\"</b><hr>\"\n                            self.html=self.html..\"Threat Status: <b>\"..(obj.info.targetThreatState == 1 and \"You are Locked\" or \"Not Locked\")..\"</b><hr>\"                            \n                        end\n                    end\n                end  \n            end\n        end\n    end    \n    return self.html..\"</div>\"\nend","filter":{"args":[],"signature":"start()","slotKey":"-3"},"key":"15"},{"code":"\n-- Function extracted from DU-Orbital-Hud by Dimencia\nfunction getDistanceDisplayString(distance)\n    local su = distance > 100000\n    local result = \"\"\n    if su then\n        -- Convert to SU\n        result = round(distance / 1000 / 200, 1) .. \" SU\"\n    elseif distance < 1000 then\n        result = round(distance, 1) .. \" M\"\n    else\n        -- Convert to KM\n        result = round(distance / 1000, 1) .. \" KM\"\n    end\n\n    return result\nend\n\n","filter":{"args":[],"signature":"start()","slotKey":"-3"},"key":"16"}],"methods":[],"events":[]}
