{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"intervalDuration = 0.2 --export: The duration of each interval in seconds.\nidleState = false --export: The state of the lights when the script has shutdown.\n\n-- PASTE SEQUENCE HERE. Replace {} with the output from the extractor.\nsequence = {{0x1ff0000,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff},{0x10000ff,0x1ff0000,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff},{0x1ff0000,0x10000ff,0x1ff0000,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff},{0x10000ff,0x1ff0000,0x10000ff,0x1ff0000,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff},{0x1ff0000,0x10000ff,0x1ff0000,0xff,0x1ff0000,0xffffff,0xffffff,0xffffff,0xffffff},{0x10000ff,0x1ff0000,0x10000ff,0x1ff0000,0x10000ff,0x1ff0000,0xffffff,0xffffff,0xffffff},{0x1ff0000,0x10000ff,0x1ff0000,0x10000ff,0x1ff0000,0x10000ff,0x1ff0000,0xffffff,0xffffff},{0x10000ff,0x1ff0000,0x10000ff,0x1ff0000,0x10000ff,0x1ff0000,0x10000ff,0x1ff0000,0xffffff},{0x1ff0000,0x10000ff,0x1ff0000,0x10000ff,0x1ff0000,0x10000ff,0x1ff0000,0x10000ff,0x1ff0000},{0x10000ff,0xffffff,0x10000ff,0xffffff,0x10000ff,0xffffff,0x10000ff,0xffffff,0x10000ff},{0xffffff,0x1ff0000,0xffffff,0x1ff0000,0xffffff,0x1ff0000,0xffffff,0x1ff0000,0xffffff},{0x10000ff,0xffffff,0x10000ff,0xffffff,0x10000ff,0xffffff,0x10000ff,0xffffff,0x10000ff},{0xffffff,0x1ff0000,0xffffff,0x1ff0000,0xffffff,0x1ff0000,0xffffff,0x1ff0000,0xffffff},{0x10000ff,0xffffff,0x10000ff,0xffffff,0x10000ff,0xffffff,0x10000ff,0xffffff,0x10000ff},{0x1ff0000,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff},{0xffffff,0x1ff0000,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff},{0xffffff,0xffffff,0x1ff0000,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff},{0xffffff,0xffffff,0xffffff,0x1ff0000,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff},{0xffffff,0xffffff,0xffffff,0xffffff,0x1ff0000,0xffffff,0xffffff,0xffffff,0xffffff},{0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0x1ff0000,0xffffff,0xffffff,0xffffff},{0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0x1ff0000,0xffffff,0xffffff},{0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0x1ff0000,0xffffff},{0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0x1ff0000},{0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0x1ff0000,0xffffff},{0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0x1ff0000,0xffffff,0xffffff},{0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0x1ff0000,0xffffff,0xffffff,0xffffff},{0xffffff,0xffffff,0xffffff,0xffffff,0x1ff0000,0xffffff,0xffffff,0xffffff,0xffffff},{0xffffff,0xffffff,0xffffff,0x1ff0000,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff},{0xffffff,0xffffff,0x1ff0000,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff},{0xffffff,0x1ff0000,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff},{0x1ff0000,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff},{0x10000ff,0x10000ff,0x10000ff,0x10000ff,0x10000ff,0x10000ff,0x10000ff,0x10000ff,0x10000ff},{0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff},{0x1ff0000,0x1ff0000,0x1ff0000,0x1ff0000,0x1ff0000,0x1ff0000,0x1ff0000,0x1ff0000,0x1ff0000},{0x1ff0000,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0x1ff0000},{0xffffff,0x1ff0000,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0x1ff0000,0xffffff},{0xffffff,0xffffff,0x1ff0000,0xffffff,0xffffff,0x1ff0000,0xffffff,0xffffff,0xffffff},{0xffffff,0xffffff,0xffffff,0x1ff0000,0x1ff0000,0xffffff,0xffffff,0xffffff,0xffffff},{0xffffff,0xffffff,0x1ff0000,0xffffff,0xffffff,0x1ff0000,0xffffff,0xffffff,0xffffff},{0xffffff,0x1ff0000,0xffffff,0xffffff,0xffffff,0xffffff,0x1ff0000,0xffffff,0xffffff},{0x1ff0000,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0x1ff0000,0xffffff},{0x1ff0000,0x1ff0000,0x1ff0000,0x1ff0000,0x1ff0000,0x1ff0000,0x1ff0000,0x1ff0000,0x1ff0000}}\n\nlights = {}\nlocal slots = { slot1, slot2, slot3, slot4, slot5, slot6, slot7, slot8, slot9, slot10 }\nfor _, element in pairs(slots) do\n    if element.activate and element.deactivate and element.setRGBColor then\n        table.insert(lights, element)\n    end\nend\n\nnextUpdate = math.ceil(system.getTime() / intervalDuration) * intervalDuration\n\nunit.hide()\nunit.setTimer(\"garbage\", 5)\n","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"0"},{"code":"for _, light in pairs(lights) do\n    if idleState then\n        light.activate()\n    else\n        light.deactivate()\n    end\n    light.setRGBColor(255, 255, 255)\nend\n","filter":{"args":[],"signature":"stop()","slotKey":"-1"},"key":"2"},{"code":"collectgarbage(\"collect\")\n","filter":{"args":[{"value":"garbage"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"3"},{"code":"if nextUpdate > system.getTime() then\n    return\nend\n\nlocal intervalIndex = math.floor(system.getTime() / intervalDuration)\nlocal step = sequence[intervalIndex % #sequence + 1]\n\nfor index, light in pairs(lights) do\n    local state = step[index] or 0\n\n    local on = (state >> 24) == 1\n    local r = (state >> 16) & 255\n    local g = (state >> 8) & 255\n    local b = state & 255\n\n    if on then\n        light.activate()\n    else\n        light.deactivate()\n    end\n    light.setRGBColor(r, g, b)\nend\n\nnextUpdate = (intervalIndex + 1) * intervalDuration\n","filter":{"args":[],"signature":"update()","slotKey":"-2"},"key":"1"}],"methods":[],"events":[]}
